/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"main": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./app/js/app.js","vendors"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/js/app.js":
/*!***********************!*\
  !*** ./app/js/app.js ***!
  \***********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/function */ \"./app/js/modules/function.js\");\n/* harmony import */ var _modules_slick__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/slick */ \"./app/js/modules/slick.js\");\n/* harmony import */ var _modules_gallery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/gallery */ \"./app/js/modules/gallery.js\");\n/* harmony import */ var _modules_materialize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/materialize */ \"./app/js/modules/materialize.js\");\n/* harmony import */ var _modules_smoothScroll__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/smoothScroll */ \"./app/js/modules/smoothScroll.js\");\n/* harmony import */ var _modules_table__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/table */ \"./app/js/modules/table.js\");\n/* harmony import */ var _modules_table__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_modules_table__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _modules_form__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/form */ \"./app/js/modules/form.js\");\n/* harmony import */ var _modules_form__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_modules_form__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var slick_carousel__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! slick-carousel */ \"./node_modules/slick-carousel/slick/slick.js\");\n/* harmony import */ var slick_carousel__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(slick_carousel__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _modules_validate__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modules/validate */ \"./app/js/modules/validate.js\");\n/* harmony import */ var _modules_datepicker__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./modules/datepicker */ \"./app/js/modules/datepicker.js\");\n\n\n\n\n // import './modules/scrollAnimation';\n\n\n //import './modules/scrollBar';\n\n\n\n\n\n\nconst body = document.querySelector('body');\nconst menu = document.querySelector('.header__menu') || document.querySelector('.menu-header-main');\nconst menuClose = document.querySelector('.menu-header-main__close');\nconst logo = document.querySelector('.header__logo');\nconst overlay = document.querySelector('.overlay');\nconst burger = document.querySelector('.header__burger') || document.querySelector('.header-main__burger');\nconst search = document.querySelector('.header__search');\nwindow.addEventListener('DOMContentLoaded', () => {\n  if (document.querySelectorAll('.header').length > 0) {\n    // Main menu\n    //console.log(logo.clientWidth + menu.clientWidth + search.clientWidth + 60);\n    if (logo.clientWidth + menu.clientWidth + search.clientWidth + 60 > window.innerWidth) {\n      const header = document.querySelector('.header');\n      header.classList.add('small');\n    }\n\n    burger.addEventListener('click', e => {\n      menu.classList.add('active');\n      overlay.classList.add('active');\n      body.classList.add('lock');\n    });\n    overlay.addEventListener('click', e => {\n      menu.classList.remove('active');\n      overlay.classList.remove('active');\n      document.querySelector('.sidebar') ? sidebar.classList.remove('active') : '';\n      body.classList.remove('lock');\n    });\n  }\n\n  if (document.querySelectorAll('.header-main').length > 0) {\n    // Main menu 2\n    burger.addEventListener('click', e => {\n      menu.classList.add('active');\n      overlay.classList.add('active');\n      body.classList.add('lock');\n    });\n    overlay.addEventListener('click', e => {\n      menu.classList.remove('active');\n      overlay.classList.remove('active');\n      document.querySelector('.sidebar') ? sidebar.classList.remove('active') : '';\n      body.classList.remove('lock');\n    });\n    menuClose.addEventListener('click', e => {\n      menu.classList.remove('active');\n      overlay.classList.remove('active');\n      document.querySelector('.sidebar') ? sidebar.classList.remove('active') : '';\n      body.classList.remove('lock');\n    });\n  } // sidebar show\n\n\n  const sidebar = document.querySelector('.sidebar');\n\n  if (document.querySelector('.sidebar')) {\n    const sidebarBtn = document.querySelector('.sidebar-show-btn');\n    const sidebarClose = document.querySelector('.sidebar__close');\n    sidebarBtn.addEventListener('click', e => {\n      e.preventDefault();\n      sidebar.classList.toggle('active');\n      overlay.classList.toggle('active');\n      body.classList.add('lock');\n    });\n    sidebarClose.addEventListener('click', e => {\n      e.preventDefault();\n      sidebar.classList.remove('active');\n      overlay.classList.remove('active');\n      body.classList.remove('lock');\n    });\n  } //swipe event\n\n\n  let touchstartX = 0;\n  let touchendX = 0;\n\n  if (document.querySelectorAll('.header').length > 0) {\n    let swipedZoneMenu = document.querySelector('.header__menu');\n    swipedZoneMenu.addEventListener('touchstart', function (event) {\n      touchstartX = event.changedTouches[0].screenX;\n    }, false);\n    swipedZoneMenu.addEventListener('touchend', function (event) {\n      touchendX = event.changedTouches[0].screenX;\n      handleMenu();\n    }, false);\n  }\n\n  if (document.querySelector('.sidebar')) {\n    let swipedZoneSidebar = document.querySelector('.sidebar');\n    swipedZoneSidebar.addEventListener('touchstart', function (event) {\n      touchstartX = event.changedTouches[0].screenX;\n    }, false);\n    swipedZoneSidebar.addEventListener('touchend', function (event) {\n      touchendX = event.changedTouches[0].screenX;\n      handleSidebar();\n    }, false);\n  }\n\n  function handleMenu() {\n    if (touchendX > touchstartX + 20) {\n      menu.classList.remove('active');\n      overlay.classList.remove('active');\n      body.classList.remove('lock');\n    }\n  }\n\n  function handleSidebar() {\n    if (touchendX < touchstartX - 20) {\n      sidebar.classList.remove('active');\n      overlay.classList.remove('active');\n      body.classList.remove('lock');\n    }\n  } //END Main menu\n  // Sub menu\n  //const sectionMenuLinks = document.querySelectorAll('.section__menu > li > a');\n\n\n  const menuOpeners = document.querySelectorAll('.menu-opener');\n  const tableMenuOpener = document.querySelector('.table__menu');\n  const tableSubmenu = document.querySelector('.table__submenu');\n  menuOpeners.forEach(link => {\n    link.addEventListener('click', e => {\n      e.stopPropagation();\n      e.preventDefault();\n      link.classList.toggle('active');\n      menuOpeners.forEach(link2 => {\n        if (link !== link2) {\n          link2.classList.remove('active');\n        }\n      });\n\n      if (document.querySelectorAll('.table').length) {\n        tableSubmenu.classList.remove('active');\n      }\n    });\n  });\n  document.addEventListener('click', e => {\n    menuOpeners.forEach(link => {\n      link.classList.remove('active');\n    });\n\n    if (document.querySelectorAll('.table').length) {\n      tableSubmenu.classList.remove('active');\n    }\n  }); // EndSub menu\n  // tablesubMenu\n\n  if (document.querySelectorAll('.table').length) {\n    tableMenuOpener.addEventListener('click', e => {\n      e.stopPropagation();\n      e.preventDefault();\n      tableSubmenu.classList.toggle('active');\n      menuOpeners.forEach(link => {\n        link.classList.remove('active');\n      });\n    }); // close submenu when click on link of\n\n    const linksTableSubmenus = tableSubmenu.querySelectorAll('a');\n    linksTableSubmenus.forEach(link => {\n      link.addEventListener('click', e => {\n        e.preventDefault();\n        tableSubmenu.classList.remove('active');\n      });\n    });\n  } // EndtablesubMenu\n  // collapse\n\n\n  if (jquery__WEBPACK_IMPORTED_MODULE_7___default()('.tab-slider').length) {\n    let lastSlider;\n\n    if (jquery__WEBPACK_IMPORTED_MODULE_7___default()('.tab-slider').length > 1) {\n      lastSlider = jquery__WEBPACK_IMPORTED_MODULE_7___default()('.tab-slider')[jquery__WEBPACK_IMPORTED_MODULE_7___default()('.tab-slider').length - 1];\n      lastSlider = jquery__WEBPACK_IMPORTED_MODULE_7___default()(lastSlider);\n      lastSlider.on('init', (event, slick) => {\n        collapseInit();\n      });\n    } else {\n      lastSlider = jquery__WEBPACK_IMPORTED_MODULE_7___default()('.tab-slider');\n      lastSlider = jquery__WEBPACK_IMPORTED_MODULE_7___default()(lastSlider);\n      lastSlider.on('init', (event, slick) => {\n        collapseInit();\n      });\n    }\n  } else {\n    collapseInit();\n  }\n\n  function collapseInit() {\n    const collapseBodies = document.querySelectorAll('.tabs-page__content');\n    collapseBodies.forEach(body => {\n      let bodyHeight;\n\n      if (body.style.display === 'none') {\n        body.style.display = '';\n        bodyHeight = body.clientHeight;\n        body.style.display = 'none';\n      } else {\n        bodyHeight = body.clientHeight;\n      }\n\n      if (bodyHeight > 330) {\n        body.classList.add('extended');\n        body.classList.toggle('collapse');\n\n        if (body.classList.contains('collapse')) {\n          body.style.height = 330 + 'px';\n        } else {\n          body.style.height = bodyHeight + 60 + 'px';\n        }\n      } // listener on btns\n\n\n      const btn = body.querySelector('.tabs-page__btn');\n      btn.addEventListener('click', evt => {\n        body.classList.toggle('collapse');\n\n        if (body.classList.contains('collapse')) {\n          body.style.height = 330 + 'px';\n        } else {\n          body.style.height = bodyHeight + 60 + 'px';\n        }\n      }); // listener on btns\n    });\n  }\n\n  if (jquery__WEBPACK_IMPORTED_MODULE_7___default()('.collapse__content').length) {\n    collapseInitAnother();\n  } // Collapse another content\n\n\n  function collapseInitAnother() {\n    const collapseBodies = document.querySelectorAll('.collapse__content');\n    collapseBodies.forEach(body => {\n      let bodyHeight;\n\n      if (body.style.display === 'none') {\n        body.style.display = '';\n        bodyHeight = body.clientHeight;\n        body.style.display = 'none';\n      } else {\n        bodyHeight = body.clientHeight;\n      }\n\n      if (bodyHeight > 330) {\n        body.classList.add('extended');\n        body.classList.toggle('collapse');\n\n        if (body.classList.contains('collapse')) {\n          body.style.height = 330 + 'px';\n        } else {\n          body.style.height = bodyHeight + 60 + 'px';\n        }\n      } // listener on btns\n\n\n      const btn = body.querySelector('.collapse__btn');\n      btn.addEventListener('click', evt => {\n        body.classList.toggle('collapse');\n\n        if (body.classList.contains('collapse')) {\n          body.style.height = 330 + 'px';\n        } else {\n          body.style.height = bodyHeight + 60 + 'px';\n        }\n      }); // listener on btns\n    });\n  } // END collapse\n  // DatePicker\n\n\n  jquery__WEBPACK_IMPORTED_MODULE_7___default.a.fn.datepicker.language['ua'] = {\n    days: ['неділя', 'понеділок', 'вівторок', 'среда', 'четвер', 'п\\'ятница', 'субота'],\n    daysShort: ['нд', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'],\n    daysMin: ['Нд', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],\n    months: ['Лютий', 'Січень', 'Березень', 'Квітень', 'Травень', 'Червень', 'Липень', 'Серпень', 'Вересень', 'Жовтень', 'Листопад', 'Грудень'],\n    monthsShort: ['Лют', 'Січ', 'Бер', 'Квіт', 'Трав', 'Черв', 'Лип', 'Серп', 'Вер', 'Жовт', 'Лист', 'Груд'],\n    today: 'Сьогодні',\n    clear: 'Очистити',\n    dateFormat: 'dd.mm.yyyy',\n    timeFormat: 'hh:ii',\n    firstDay: 1\n  }; // $$ change available range of days\n\n  if (document.querySelectorAll('.datepicker-booking').length) {\n    let minDay = new Date();\n    let maxDay;\n    const dataPickers = document.querySelectorAll('.datepicker-booking');\n    dataPickers.forEach(dataPicker => {\n      maxDay = new Date();\n      maxDay.setDate(maxDay.getDate());\n\n      if (dataPicker.classList.contains('max2')) {\n        maxDay = new Date();\n        maxDay.setDate(maxDay.getDate() + 2);\n      } else if (dataPicker.classList.contains('max60')) {\n        maxDay = new Date();\n        maxDay.setDate(maxDay.getDate() + 60);\n      }\n\n      jquery__WEBPACK_IMPORTED_MODULE_7___default()(dataPicker).datepicker({\n        autoClose: true,\n        language: 'ua',\n        minDate: minDay,\n        maxDate: maxDay\n      });\n      let bookingDatePicker = jquery__WEBPACK_IMPORTED_MODULE_7___default()(dataPicker).datepicker().data('datepicker');\n      bookingDatePicker.selectDate(minDay);\n    });\n  } // End DatePicker\n  //orientation change\n  // Прослушка события смены ориентации\n\n\n  if (document.querySelectorAll('.header-main').length > 0) {\n    window.addEventListener(\"orientationchange\", function () {\n      const windowWidth = window.innerWidth;\n      const errorBlock = document.querySelector('#error-rotate');\n\n      if (windowWidth < 500) {\n        errorBlock.classList.add('active');\n      } else {\n        errorBlock.classList.remove('active');\n      }\n    }, false);\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/js/app.js\n");

/***/ }),

/***/ "./app/js/modules/datepicker.js":
/*!**************************************!*\
  !*** ./app/js/modules/datepicker.js ***!
  \**************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n\n;\n\n(function (window, $, undefined) {\n  ;\n\n  (function () {\n    var VERSION = '2.2.3',\n        pluginName = 'datepicker',\n        autoInitSelector = '.datepicker-here',\n        $body,\n        $datepickersContainer,\n        containerBuilt = false,\n        baseTemplate = '' + '<div class=\"datepicker\">' + '<i class=\"datepicker--pointer\"></i>' + '<nav class=\"datepicker--nav\"></nav>' + '<div class=\"datepicker--content\"></div>' + '</div>',\n        defaults = {\n      classes: '',\n      inline: false,\n      language: 'ru',\n      startDate: new Date(),\n      firstDay: '',\n      weekends: [6, 0],\n      dateFormat: '',\n      altField: '',\n      altFieldDateFormat: '@',\n      toggleSelected: true,\n      keyboardNav: true,\n      position: 'bottom left',\n      offset: 12,\n      view: 'days',\n      minView: 'days',\n      showOtherMonths: true,\n      selectOtherMonths: true,\n      moveToOtherMonthsOnSelect: true,\n      showOtherYears: true,\n      selectOtherYears: true,\n      moveToOtherYearsOnSelect: true,\n      minDate: '',\n      maxDate: '',\n      disableNavWhenOutOfRange: true,\n      multipleDates: false,\n      // Boolean or Number\n      multipleDatesSeparator: ',',\n      range: false,\n      todayButton: false,\n      clearButton: false,\n      showEvent: 'focus',\n      autoClose: false,\n      // navigation\n      monthsField: 'monthsShort',\n      prevHtml: '<svg><path d=\"M 17,12 l -5,5 l 5,5\"></path></svg>',\n      nextHtml: '<svg><path d=\"M 14,12 l 5,5 l -5,5\"></path></svg>',\n      navTitles: {\n        days: 'MM, <i>yyyy</i>',\n        months: 'yyyy',\n        years: 'yyyy1 - yyyy2'\n      },\n      // timepicker\n      timepicker: false,\n      onlyTimepicker: false,\n      dateTimeSeparator: ' ',\n      timeFormat: '',\n      minHours: 0,\n      maxHours: 24,\n      minMinutes: 0,\n      maxMinutes: 59,\n      hoursStep: 1,\n      minutesStep: 1,\n      // events\n      onSelect: '',\n      onShow: '',\n      onHide: '',\n      onChangeMonth: '',\n      onChangeYear: '',\n      onChangeDecade: '',\n      onChangeView: '',\n      onRenderCell: ''\n    },\n        hotKeys = {\n      'ctrlRight': [17, 39],\n      'ctrlUp': [17, 38],\n      'ctrlLeft': [17, 37],\n      'ctrlDown': [17, 40],\n      'shiftRight': [16, 39],\n      'shiftUp': [16, 38],\n      'shiftLeft': [16, 37],\n      'shiftDown': [16, 40],\n      'altUp': [18, 38],\n      'altRight': [18, 39],\n      'altLeft': [18, 37],\n      'altDown': [18, 40],\n      'ctrlShiftUp': [16, 17, 38]\n    },\n        datepicker;\n\n    var Datepicker = function (el, options) {\n      this.el = el;\n      this.$el = $(el);\n      this.opts = $.extend(true, {}, defaults, options, this.$el.data());\n\n      if ($body == undefined) {\n        $body = $('body');\n      }\n\n      if (!this.opts.startDate) {\n        this.opts.startDate = new Date();\n      }\n\n      if (this.el.nodeName == 'INPUT') {\n        this.elIsInput = true;\n      }\n\n      if (this.opts.altField) {\n        this.$altField = typeof this.opts.altField == 'string' ? $(this.opts.altField) : this.opts.altField;\n      }\n\n      this.inited = false;\n      this.visible = false;\n      this.silent = false; // Need to prevent unnecessary rendering\n\n      this.currentDate = this.opts.startDate;\n      this.currentView = this.opts.view;\n\n      this._createShortCuts();\n\n      this.selectedDates = [];\n      this.views = {};\n      this.keys = [];\n      this.minRange = '';\n      this.maxRange = '';\n      this._prevOnSelectValue = '';\n      this.init();\n    };\n\n    datepicker = Datepicker;\n    datepicker.prototype = {\n      VERSION: VERSION,\n      viewIndexes: ['days', 'months', 'years'],\n      init: function () {\n        if (!containerBuilt && !this.opts.inline && this.elIsInput) {\n          this._buildDatepickersContainer();\n        }\n\n        this._buildBaseHtml();\n\n        this._defineLocale(this.opts.language);\n\n        this._syncWithMinMaxDates();\n\n        if (this.elIsInput) {\n          if (!this.opts.inline) {\n            // Set extra classes for proper transitions\n            this._setPositionClasses(this.opts.position);\n\n            this._bindEvents();\n          }\n\n          if (this.opts.keyboardNav && !this.opts.onlyTimepicker) {\n            this._bindKeyboardEvents();\n          }\n\n          this.$datepicker.on('mousedown', this._onMouseDownDatepicker.bind(this));\n          this.$datepicker.on('mouseup', this._onMouseUpDatepicker.bind(this));\n        }\n\n        if (this.opts.classes) {\n          this.$datepicker.addClass(this.opts.classes);\n        }\n\n        if (this.opts.timepicker) {\n          this.timepicker = new $.fn.datepicker.Timepicker(this, this.opts);\n\n          this._bindTimepickerEvents();\n        }\n\n        if (this.opts.onlyTimepicker) {\n          this.$datepicker.addClass('-only-timepicker-');\n        }\n\n        this.views[this.currentView] = new $.fn.datepicker.Body(this, this.currentView, this.opts);\n        this.views[this.currentView].show();\n        this.nav = new $.fn.datepicker.Navigation(this, this.opts);\n        this.view = this.currentView;\n        this.$el.on('clickCell.adp', this._onClickCell.bind(this));\n        this.$datepicker.on('mouseenter', '.datepicker--cell', this._onMouseEnterCell.bind(this));\n        this.$datepicker.on('mouseleave', '.datepicker--cell', this._onMouseLeaveCell.bind(this));\n        this.inited = true;\n      },\n      _createShortCuts: function () {\n        this.minDate = this.opts.minDate ? this.opts.minDate : new Date(-8639999913600000);\n        this.maxDate = this.opts.maxDate ? this.opts.maxDate : new Date(8639999913600000);\n      },\n      _bindEvents: function () {\n        this.$el.on(this.opts.showEvent + '.adp', this._onShowEvent.bind(this));\n        this.$el.on('mouseup.adp', this._onMouseUpEl.bind(this));\n        this.$el.on('blur.adp', this._onBlur.bind(this));\n        this.$el.on('keyup.adp', this._onKeyUpGeneral.bind(this));\n        $(window).on('resize.adp', this._onResize.bind(this));\n        $('body').on('mouseup.adp', this._onMouseUpBody.bind(this));\n      },\n      _bindKeyboardEvents: function () {\n        this.$el.on('keydown.adp', this._onKeyDown.bind(this));\n        this.$el.on('keyup.adp', this._onKeyUp.bind(this));\n        this.$el.on('hotKey.adp', this._onHotKey.bind(this));\n      },\n      _bindTimepickerEvents: function () {\n        this.$el.on('timeChange.adp', this._onTimeChange.bind(this));\n      },\n      isWeekend: function (day) {\n        return this.opts.weekends.indexOf(day) !== -1;\n      },\n      _defineLocale: function (lang) {\n        if (typeof lang == 'string') {\n          this.loc = $.fn.datepicker.language[lang];\n\n          if (!this.loc) {\n            console.warn('Can\\'t find language \"' + lang + '\" in Datepicker.language, will use \"ru\" instead');\n            this.loc = $.extend(true, {}, $.fn.datepicker.language.ru);\n          }\n\n          this.loc = $.extend(true, {}, $.fn.datepicker.language.ru, $.fn.datepicker.language[lang]);\n        } else {\n          this.loc = $.extend(true, {}, $.fn.datepicker.language.ru, lang);\n        }\n\n        if (this.opts.dateFormat) {\n          this.loc.dateFormat = this.opts.dateFormat;\n        }\n\n        if (this.opts.timeFormat) {\n          this.loc.timeFormat = this.opts.timeFormat;\n        }\n\n        if (this.opts.firstDay !== '') {\n          this.loc.firstDay = this.opts.firstDay;\n        }\n\n        if (this.opts.timepicker) {\n          this.loc.dateFormat = [this.loc.dateFormat, this.loc.timeFormat].join(this.opts.dateTimeSeparator);\n        }\n\n        if (this.opts.onlyTimepicker) {\n          this.loc.dateFormat = this.loc.timeFormat;\n        }\n\n        var boundary = this._getWordBoundaryRegExp;\n\n        if (this.loc.timeFormat.match(boundary('aa')) || this.loc.timeFormat.match(boundary('AA'))) {\n          this.ampm = true;\n        }\n      },\n      _buildDatepickersContainer: function () {\n        containerBuilt = true;\n        $body.append('<div class=\"datepickers-container\" id=\"datepickers-container\"></div>');\n        $datepickersContainer = $('#datepickers-container');\n      },\n      _buildBaseHtml: function () {\n        var $appendTarget,\n            $inline = $('<div class=\"datepicker-inline\">');\n\n        if (this.el.nodeName == 'INPUT') {\n          if (!this.opts.inline) {\n            $appendTarget = $datepickersContainer;\n          } else {\n            $appendTarget = $inline.insertAfter(this.$el);\n          }\n        } else {\n          $appendTarget = $inline.appendTo(this.$el);\n        }\n\n        this.$datepicker = $(baseTemplate).appendTo($appendTarget);\n        this.$content = $('.datepicker--content', this.$datepicker);\n        this.$nav = $('.datepicker--nav', this.$datepicker);\n      },\n      _triggerOnChange: function () {\n        if (!this.selectedDates.length) {\n          // Prevent from triggering multiple onSelect callback with same argument (empty string) in IE10-11\n          if (this._prevOnSelectValue === '') return;\n          this._prevOnSelectValue = '';\n          return this.opts.onSelect('', '', this);\n        }\n\n        var selectedDates = this.selectedDates,\n            parsedSelected = datepicker.getParsedDate(selectedDates[0]),\n            formattedDates,\n            _this = this,\n            dates = new Date(parsedSelected.year, parsedSelected.month, parsedSelected.date, parsedSelected.hours, parsedSelected.minutes);\n\n        formattedDates = selectedDates.map(function (date) {\n          return _this.formatDate(_this.loc.dateFormat, date);\n        }).join(this.opts.multipleDatesSeparator); // Create new dates array, to separate it from original selectedDates\n\n        if (this.opts.multipleDates || this.opts.range) {\n          dates = selectedDates.map(function (date) {\n            var parsedDate = datepicker.getParsedDate(date);\n            return new Date(parsedDate.year, parsedDate.month, parsedDate.date, parsedDate.hours, parsedDate.minutes);\n          });\n        }\n\n        this._prevOnSelectValue = formattedDates;\n        this.opts.onSelect(formattedDates, dates, this);\n      },\n      next: function () {\n        var d = this.parsedDate,\n            o = this.opts;\n\n        switch (this.view) {\n          case 'days':\n            this.date = new Date(d.year, d.month + 1, 1);\n            if (o.onChangeMonth) o.onChangeMonth(this.parsedDate.month, this.parsedDate.year);\n            break;\n\n          case 'months':\n            this.date = new Date(d.year + 1, d.month, 1);\n            if (o.onChangeYear) o.onChangeYear(this.parsedDate.year);\n            break;\n\n          case 'years':\n            this.date = new Date(d.year + 10, 0, 1);\n            if (o.onChangeDecade) o.onChangeDecade(this.curDecade);\n            break;\n        }\n      },\n      prev: function () {\n        var d = this.parsedDate,\n            o = this.opts;\n\n        switch (this.view) {\n          case 'days':\n            this.date = new Date(d.year, d.month - 1, 1);\n            if (o.onChangeMonth) o.onChangeMonth(this.parsedDate.month, this.parsedDate.year);\n            break;\n\n          case 'months':\n            this.date = new Date(d.year - 1, d.month, 1);\n            if (o.onChangeYear) o.onChangeYear(this.parsedDate.year);\n            break;\n\n          case 'years':\n            this.date = new Date(d.year - 10, 0, 1);\n            if (o.onChangeDecade) o.onChangeDecade(this.curDecade);\n            break;\n        }\n      },\n      formatDate: function (string, date) {\n        date = date || this.date;\n        var result = string,\n            boundary = this._getWordBoundaryRegExp,\n            locale = this.loc,\n            leadingZero = datepicker.getLeadingZeroNum,\n            decade = datepicker.getDecade(date),\n            d = datepicker.getParsedDate(date),\n            fullHours = d.fullHours,\n            hours = d.hours,\n            ampm = string.match(boundary('aa')) || string.match(boundary('AA')),\n            dayPeriod = 'am',\n            replacer = this._replacer,\n            validHours;\n\n        if (this.opts.timepicker && this.timepicker && ampm) {\n          validHours = this.timepicker._getValidHoursFromDate(date, ampm);\n          fullHours = leadingZero(validHours.hours);\n          hours = validHours.hours;\n          dayPeriod = validHours.dayPeriod;\n        }\n\n        switch (true) {\n          case /@/.test(result):\n            result = result.replace(/@/, date.getTime());\n\n          case /aa/.test(result):\n            result = replacer(result, boundary('aa'), dayPeriod);\n\n          case /AA/.test(result):\n            result = replacer(result, boundary('AA'), dayPeriod.toUpperCase());\n\n          case /dd/.test(result):\n            result = replacer(result, boundary('dd'), d.fullDate);\n\n          case /d/.test(result):\n            result = replacer(result, boundary('d'), d.date);\n\n          case /DD/.test(result):\n            result = replacer(result, boundary('DD'), locale.days[d.day]);\n\n          case /D/.test(result):\n            result = replacer(result, boundary('D'), locale.daysShort[d.day]);\n\n          case /mm/.test(result):\n            result = replacer(result, boundary('mm'), d.fullMonth);\n\n          case /m/.test(result):\n            result = replacer(result, boundary('m'), d.month + 1);\n\n          case /MM/.test(result):\n            result = replacer(result, boundary('MM'), this.loc.months[d.month]);\n\n          case /M/.test(result):\n            result = replacer(result, boundary('M'), locale.monthsShort[d.month]);\n\n          case /ii/.test(result):\n            result = replacer(result, boundary('ii'), d.fullMinutes);\n\n          case /i/.test(result):\n            result = replacer(result, boundary('i'), d.minutes);\n\n          case /hh/.test(result):\n            result = replacer(result, boundary('hh'), fullHours);\n\n          case /h/.test(result):\n            result = replacer(result, boundary('h'), hours);\n\n          case /yyyy/.test(result):\n            result = replacer(result, boundary('yyyy'), d.year);\n\n          case /yyyy1/.test(result):\n            result = replacer(result, boundary('yyyy1'), decade[0]);\n\n          case /yyyy2/.test(result):\n            result = replacer(result, boundary('yyyy2'), decade[1]);\n\n          case /yy/.test(result):\n            result = replacer(result, boundary('yy'), d.year.toString().slice(-2));\n        }\n\n        return result;\n      },\n      _replacer: function (str, reg, data) {\n        return str.replace(reg, function (match, p1, p2, p3) {\n          return p1 + data + p3;\n        });\n      },\n      _getWordBoundaryRegExp: function (sign) {\n        var symbols = '\\\\s|\\\\.|-|/|\\\\\\\\|,|\\\\$|\\\\!|\\\\?|:|;';\n        return new RegExp('(^|>|' + symbols + ')(' + sign + ')($|<|' + symbols + ')', 'g');\n      },\n      selectDate: function (date) {\n        var _this = this,\n            opts = _this.opts,\n            d = _this.parsedDate,\n            selectedDates = _this.selectedDates,\n            len = selectedDates.length,\n            newDate = '';\n\n        if (Array.isArray(date)) {\n          date.forEach(function (d) {\n            _this.selectDate(d);\n          });\n          return;\n        }\n\n        if (!(date instanceof Date)) return;\n        this.lastSelectedDate = date; // Set new time values from Date\n\n        if (this.timepicker) {\n          this.timepicker._setTime(date);\n        } // On this step timepicker will set valid values in it's instance\n\n\n        _this._trigger('selectDate', date); // Set correct time values after timepicker's validation\n        // Prevent from setting hours or minutes which values are lesser then `min` value or\n        // greater then `max` value\n\n\n        if (this.timepicker) {\n          date.setHours(this.timepicker.hours);\n          date.setMinutes(this.timepicker.minutes);\n        }\n\n        if (_this.view == 'days') {\n          if (date.getMonth() != d.month && opts.moveToOtherMonthsOnSelect) {\n            newDate = new Date(date.getFullYear(), date.getMonth(), 1);\n          }\n        }\n\n        if (_this.view == 'years') {\n          if (date.getFullYear() != d.year && opts.moveToOtherYearsOnSelect) {\n            newDate = new Date(date.getFullYear(), 0, 1);\n          }\n        }\n\n        if (newDate) {\n          _this.silent = true;\n          _this.date = newDate;\n          _this.silent = false;\n\n          _this.nav._render();\n        }\n\n        if (opts.multipleDates && !opts.range) {\n          // Set priority to range functionality\n          if (len === opts.multipleDates) return;\n\n          if (!_this._isSelected(date)) {\n            _this.selectedDates.push(date);\n          }\n        } else if (opts.range) {\n          if (len == 2) {\n            _this.selectedDates = [date];\n            _this.minRange = date;\n            _this.maxRange = '';\n          } else if (len == 1) {\n            _this.selectedDates.push(date);\n\n            if (!_this.maxRange) {\n              _this.maxRange = date;\n            } else {\n              _this.minRange = date;\n            } // Swap dates if they were selected via dp.selectDate() and second date was smaller then first\n\n\n            if (datepicker.bigger(_this.maxRange, _this.minRange)) {\n              _this.maxRange = _this.minRange;\n              _this.minRange = date;\n            }\n\n            _this.selectedDates = [_this.minRange, _this.maxRange];\n          } else {\n            _this.selectedDates = [date];\n            _this.minRange = date;\n          }\n        } else {\n          _this.selectedDates = [date];\n        }\n\n        _this._setInputValue();\n\n        if (opts.onSelect) {\n          _this._triggerOnChange();\n        }\n\n        if (opts.autoClose && !this.timepickerIsActive) {\n          if (!opts.multipleDates && !opts.range) {\n            _this.hide();\n          } else if (opts.range && _this.selectedDates.length == 2) {\n            _this.hide();\n          }\n        }\n\n        _this.views[this.currentView]._render();\n      },\n      removeDate: function (date) {\n        var selected = this.selectedDates,\n            _this = this;\n\n        if (!(date instanceof Date)) return;\n        return selected.some(function (curDate, i) {\n          if (datepicker.isSame(curDate, date)) {\n            selected.splice(i, 1);\n\n            if (!_this.selectedDates.length) {\n              _this.minRange = '';\n              _this.maxRange = '';\n              _this.lastSelectedDate = '';\n            } else {\n              _this.lastSelectedDate = _this.selectedDates[_this.selectedDates.length - 1];\n            }\n\n            _this.views[_this.currentView]._render();\n\n            _this._setInputValue();\n\n            if (_this.opts.onSelect) {\n              _this._triggerOnChange();\n            }\n\n            return true;\n          }\n        });\n      },\n      today: function () {\n        this.silent = true;\n        this.view = this.opts.minView;\n        this.silent = false;\n        this.date = new Date();\n\n        if (this.opts.todayButton instanceof Date) {\n          this.selectDate(this.opts.todayButton);\n        }\n      },\n      clear: function () {\n        this.selectedDates = [];\n        this.minRange = '';\n        this.maxRange = '';\n\n        this.views[this.currentView]._render();\n\n        this._setInputValue();\n\n        if (this.opts.onSelect) {\n          this._triggerOnChange();\n        }\n      },\n\n      /**\n       * Updates datepicker options\n       * @param {String|Object} param - parameter's name to update. If object then it will extend current options\n       * @param {String|Number|Object} [value] - new param value\n       */\n      update: function (param, value) {\n        var len = arguments.length,\n            lastSelectedDate = this.lastSelectedDate;\n\n        if (len == 2) {\n          this.opts[param] = value;\n        } else if (len == 1 && typeof param == 'object') {\n          this.opts = $.extend(true, this.opts, param);\n        }\n\n        this._createShortCuts();\n\n        this._syncWithMinMaxDates();\n\n        this._defineLocale(this.opts.language);\n\n        this.nav._addButtonsIfNeed();\n\n        if (!this.opts.onlyTimepicker) this.nav._render();\n\n        this.views[this.currentView]._render();\n\n        if (this.elIsInput && !this.opts.inline) {\n          this._setPositionClasses(this.opts.position);\n\n          if (this.visible) {\n            this.setPosition(this.opts.position);\n          }\n        }\n\n        if (this.opts.classes) {\n          this.$datepicker.addClass(this.opts.classes);\n        }\n\n        if (this.opts.onlyTimepicker) {\n          this.$datepicker.addClass('-only-timepicker-');\n        }\n\n        if (this.opts.timepicker) {\n          if (lastSelectedDate) this.timepicker._handleDate(lastSelectedDate);\n\n          this.timepicker._updateRanges();\n\n          this.timepicker._updateCurrentTime(); // Change hours and minutes if it's values have been changed through min/max hours/minutes\n\n\n          if (lastSelectedDate) {\n            lastSelectedDate.setHours(this.timepicker.hours);\n            lastSelectedDate.setMinutes(this.timepicker.minutes);\n          }\n        }\n\n        this._setInputValue();\n\n        return this;\n      },\n      _syncWithMinMaxDates: function () {\n        var curTime = this.date.getTime();\n        this.silent = true;\n\n        if (this.minTime > curTime) {\n          this.date = this.minDate;\n        }\n\n        if (this.maxTime < curTime) {\n          this.date = this.maxDate;\n        }\n\n        this.silent = false;\n      },\n      _isSelected: function (checkDate, cellType) {\n        var res = false;\n        this.selectedDates.some(function (date) {\n          if (datepicker.isSame(date, checkDate, cellType)) {\n            res = date;\n            return true;\n          }\n        });\n        return res;\n      },\n      _setInputValue: function () {\n        var _this = this,\n            opts = _this.opts,\n            format = _this.loc.dateFormat,\n            altFormat = opts.altFieldDateFormat,\n            value = _this.selectedDates.map(function (date) {\n          return _this.formatDate(format, date);\n        }),\n            altValues;\n\n        if (opts.altField && _this.$altField.length) {\n          altValues = this.selectedDates.map(function (date) {\n            return _this.formatDate(altFormat, date);\n          });\n          altValues = altValues.join(this.opts.multipleDatesSeparator);\n          this.$altField.val(altValues);\n        }\n\n        value = value.join(this.opts.multipleDatesSeparator);\n        this.$el.val(value);\n      },\n\n      /**\n       * Check if date is between minDate and maxDate\n       * @param date {object} - date object\n       * @param type {string} - cell type\n       * @returns {boolean}\n       * @private\n       */\n      _isInRange: function (date, type) {\n        var time = date.getTime(),\n            d = datepicker.getParsedDate(date),\n            min = datepicker.getParsedDate(this.minDate),\n            max = datepicker.getParsedDate(this.maxDate),\n            dMinTime = new Date(d.year, d.month, min.date).getTime(),\n            dMaxTime = new Date(d.year, d.month, max.date).getTime(),\n            types = {\n          day: time >= this.minTime && time <= this.maxTime,\n          month: dMinTime >= this.minTime && dMaxTime <= this.maxTime,\n          year: d.year >= min.year && d.year <= max.year\n        };\n        return type ? types[type] : types.day;\n      },\n      _getDimensions: function ($el) {\n        var offset = $el.offset();\n        return {\n          width: $el.outerWidth(),\n          height: $el.outerHeight(),\n          left: offset.left,\n          top: offset.top\n        };\n      },\n      _getDateFromCell: function (cell) {\n        var curDate = this.parsedDate,\n            year = cell.data('year') || curDate.year,\n            month = cell.data('month') == undefined ? curDate.month : cell.data('month'),\n            date = cell.data('date') || 1;\n        return new Date(year, month, date);\n      },\n      _setPositionClasses: function (pos) {\n        pos = pos.split(' ');\n        var main = pos[0],\n            sec = pos[1],\n            classes = 'datepicker -' + main + '-' + sec + '- -from-' + main + '-';\n        if (this.visible) classes += ' active';\n        this.$datepicker.removeAttr('class').addClass(classes);\n      },\n      setPosition: function (position) {\n        position = position || this.opts.position;\n\n        var dims = this._getDimensions(this.$el),\n            selfDims = this._getDimensions(this.$datepicker),\n            pos = position.split(' '),\n            top,\n            left,\n            offset = this.opts.offset,\n            main = pos[0],\n            secondary = pos[1];\n\n        switch (main) {\n          case 'top':\n            top = dims.top - selfDims.height - offset;\n            break;\n\n          case 'right':\n            left = dims.left + dims.width + offset;\n            break;\n\n          case 'bottom':\n            top = dims.top + dims.height + offset;\n            break;\n\n          case 'left':\n            left = dims.left - selfDims.width - offset;\n            break;\n        }\n\n        switch (secondary) {\n          case 'top':\n            top = dims.top;\n            break;\n\n          case 'right':\n            left = dims.left + dims.width - selfDims.width;\n            break;\n\n          case 'bottom':\n            top = dims.top + dims.height - selfDims.height;\n            break;\n\n          case 'left':\n            left = dims.left;\n            break;\n\n          case 'center':\n            if (/left|right/.test(main)) {\n              top = dims.top + dims.height / 2 - selfDims.height / 2;\n            } else {\n              left = dims.left + dims.width / 2 - selfDims.width / 2;\n            }\n\n        }\n\n        this.$datepicker.css({\n          left: left,\n          top: top\n        });\n      },\n      show: function () {\n        var onShow = this.opts.onShow;\n        this.setPosition(this.opts.position);\n        this.$datepicker.addClass('active');\n        this.visible = true;\n\n        if (onShow) {\n          this._bindVisionEvents(onShow);\n        }\n      },\n      hide: function () {\n        var onHide = this.opts.onHide;\n        this.$datepicker.removeClass('active').css({\n          left: '-100000px'\n        });\n        this.focused = '';\n        this.keys = [];\n        this.inFocus = false;\n        this.visible = false;\n        this.$el.blur();\n\n        if (onHide) {\n          this._bindVisionEvents(onHide);\n        }\n      },\n      down: function (date) {\n        this._changeView(date, 'down');\n      },\n      up: function (date) {\n        this._changeView(date, 'up');\n      },\n      _bindVisionEvents: function (event) {\n        this.$datepicker.off('transitionend.dp');\n        event(this, false);\n        this.$datepicker.one('transitionend.dp', event.bind(this, this, true));\n      },\n      _changeView: function (date, dir) {\n        date = date || this.focused || this.date;\n        var nextView = dir == 'up' ? this.viewIndex + 1 : this.viewIndex - 1;\n        if (nextView > 2) nextView = 2;\n        if (nextView < 0) nextView = 0;\n        this.silent = true;\n        this.date = new Date(date.getFullYear(), date.getMonth(), 1);\n        this.silent = false;\n        this.view = this.viewIndexes[nextView];\n      },\n      _handleHotKey: function (key) {\n        var date = datepicker.getParsedDate(this._getFocusedDate()),\n            focusedParsed,\n            o = this.opts,\n            newDate,\n            totalDaysInNextMonth,\n            monthChanged = false,\n            yearChanged = false,\n            decadeChanged = false,\n            y = date.year,\n            m = date.month,\n            d = date.date;\n\n        switch (key) {\n          case 'ctrlRight':\n          case 'ctrlUp':\n            m += 1;\n            monthChanged = true;\n            break;\n\n          case 'ctrlLeft':\n          case 'ctrlDown':\n            m -= 1;\n            monthChanged = true;\n            break;\n\n          case 'shiftRight':\n          case 'shiftUp':\n            yearChanged = true;\n            y += 1;\n            break;\n\n          case 'shiftLeft':\n          case 'shiftDown':\n            yearChanged = true;\n            y -= 1;\n            break;\n\n          case 'altRight':\n          case 'altUp':\n            decadeChanged = true;\n            y += 10;\n            break;\n\n          case 'altLeft':\n          case 'altDown':\n            decadeChanged = true;\n            y -= 10;\n            break;\n\n          case 'ctrlShiftUp':\n            this.up();\n            break;\n        }\n\n        totalDaysInNextMonth = datepicker.getDaysCount(new Date(y, m));\n        newDate = new Date(y, m, d); // If next month has less days than current, set date to total days in that month\n\n        if (totalDaysInNextMonth < d) d = totalDaysInNextMonth; // Check if newDate is in valid range\n\n        if (newDate.getTime() < this.minTime) {\n          newDate = this.minDate;\n        } else if (newDate.getTime() > this.maxTime) {\n          newDate = this.maxDate;\n        }\n\n        this.focused = newDate;\n        focusedParsed = datepicker.getParsedDate(newDate);\n\n        if (monthChanged && o.onChangeMonth) {\n          o.onChangeMonth(focusedParsed.month, focusedParsed.year);\n        }\n\n        if (yearChanged && o.onChangeYear) {\n          o.onChangeYear(focusedParsed.year);\n        }\n\n        if (decadeChanged && o.onChangeDecade) {\n          o.onChangeDecade(this.curDecade);\n        }\n      },\n      _registerKey: function (key) {\n        var exists = this.keys.some(function (curKey) {\n          return curKey == key;\n        });\n\n        if (!exists) {\n          this.keys.push(key);\n        }\n      },\n      _unRegisterKey: function (key) {\n        var index = this.keys.indexOf(key);\n        this.keys.splice(index, 1);\n      },\n      _isHotKeyPressed: function () {\n        var currentHotKey,\n            found = false,\n            _this = this,\n            pressedKeys = this.keys.sort();\n\n        for (var hotKey in hotKeys) {\n          currentHotKey = hotKeys[hotKey];\n          if (pressedKeys.length != currentHotKey.length) continue;\n\n          if (currentHotKey.every(function (key, i) {\n            return key == pressedKeys[i];\n          })) {\n            _this._trigger('hotKey', hotKey);\n\n            found = true;\n          }\n        }\n\n        return found;\n      },\n      _trigger: function (event, args) {\n        this.$el.trigger(event, args);\n      },\n      _focusNextCell: function (keyCode, type) {\n        type = type || this.cellType;\n        var date = datepicker.getParsedDate(this._getFocusedDate()),\n            y = date.year,\n            m = date.month,\n            d = date.date;\n\n        if (this._isHotKeyPressed()) {\n          return;\n        }\n\n        switch (keyCode) {\n          case 37:\n            // left\n            type == 'day' ? d -= 1 : '';\n            type == 'month' ? m -= 1 : '';\n            type == 'year' ? y -= 1 : '';\n            break;\n\n          case 38:\n            // up\n            type == 'day' ? d -= 7 : '';\n            type == 'month' ? m -= 3 : '';\n            type == 'year' ? y -= 4 : '';\n            break;\n\n          case 39:\n            // right\n            type == 'day' ? d += 1 : '';\n            type == 'month' ? m += 1 : '';\n            type == 'year' ? y += 1 : '';\n            break;\n\n          case 40:\n            // down\n            type == 'day' ? d += 7 : '';\n            type == 'month' ? m += 3 : '';\n            type == 'year' ? y += 4 : '';\n            break;\n        }\n\n        var nd = new Date(y, m, d);\n\n        if (nd.getTime() < this.minTime) {\n          nd = this.minDate;\n        } else if (nd.getTime() > this.maxTime) {\n          nd = this.maxDate;\n        }\n\n        this.focused = nd;\n      },\n      _getFocusedDate: function () {\n        var focused = this.focused || this.selectedDates[this.selectedDates.length - 1],\n            d = this.parsedDate;\n\n        if (!focused) {\n          switch (this.view) {\n            case 'days':\n              focused = new Date(d.year, d.month, new Date().getDate());\n              break;\n\n            case 'months':\n              focused = new Date(d.year, d.month, 1);\n              break;\n\n            case 'years':\n              focused = new Date(d.year, 0, 1);\n              break;\n          }\n        }\n\n        return focused;\n      },\n      _getCell: function (date, type) {\n        type = type || this.cellType;\n        var d = datepicker.getParsedDate(date),\n            selector = '.datepicker--cell[data-year=\"' + d.year + '\"]',\n            $cell;\n\n        switch (type) {\n          case 'month':\n            selector = '[data-month=\"' + d.month + '\"]';\n            break;\n\n          case 'day':\n            selector += '[data-month=\"' + d.month + '\"][data-date=\"' + d.date + '\"]';\n            break;\n        }\n\n        $cell = this.views[this.currentView].$el.find(selector);\n        return $cell.length ? $cell : $('');\n      },\n      destroy: function () {\n        var _this = this;\n\n        _this.$el.off('.adp').data('datepicker', '');\n\n        _this.selectedDates = [];\n        _this.focused = '';\n        _this.views = {};\n        _this.keys = [];\n        _this.minRange = '';\n        _this.maxRange = '';\n\n        if (_this.opts.inline || !_this.elIsInput) {\n          _this.$datepicker.closest('.datepicker-inline').remove();\n        } else {\n          _this.$datepicker.remove();\n        }\n      },\n      _handleAlreadySelectedDates: function (alreadySelected, selectedDate) {\n        if (this.opts.range) {\n          if (!this.opts.toggleSelected) {\n            // Add possibility to select same date when range is true\n            if (this.selectedDates.length != 2) {\n              this._trigger('clickCell', selectedDate);\n            }\n          } else {\n            this.removeDate(selectedDate);\n          }\n        } else if (this.opts.toggleSelected) {\n          this.removeDate(selectedDate);\n        } // Change last selected date to be able to change time when clicking on this cell\n\n\n        if (!this.opts.toggleSelected) {\n          this.lastSelectedDate = alreadySelected;\n\n          if (this.opts.timepicker) {\n            this.timepicker._setTime(alreadySelected);\n\n            this.timepicker.update();\n          }\n        }\n      },\n      _onShowEvent: function (e) {\n        if (!this.visible) {\n          this.show();\n        }\n      },\n      _onBlur: function () {\n        if (!this.inFocus && this.visible) {\n          this.hide();\n        }\n      },\n      _onMouseDownDatepicker: function (e) {\n        this.inFocus = true;\n      },\n      _onMouseUpDatepicker: function (e) {\n        this.inFocus = false;\n        e.originalEvent.inFocus = true;\n        if (!e.originalEvent.timepickerFocus) this.$el.focus();\n      },\n      _onKeyUpGeneral: function (e) {\n        var val = this.$el.val();\n\n        if (!val) {\n          this.clear();\n        }\n      },\n      _onResize: function () {\n        if (this.visible) {\n          this.setPosition();\n        }\n      },\n      _onMouseUpBody: function (e) {\n        if (e.originalEvent.inFocus) return;\n\n        if (this.visible && !this.inFocus) {\n          this.hide();\n        }\n      },\n      _onMouseUpEl: function (e) {\n        e.originalEvent.inFocus = true;\n        setTimeout(this._onKeyUpGeneral.bind(this), 4);\n      },\n      _onKeyDown: function (e) {\n        var code = e.which;\n\n        this._registerKey(code); // Arrows\n\n\n        if (code >= 37 && code <= 40) {\n          e.preventDefault();\n\n          this._focusNextCell(code);\n        } // Enter\n\n\n        if (code == 13) {\n          if (this.focused) {\n            if (this._getCell(this.focused).hasClass('-disabled-')) return;\n\n            if (this.view != this.opts.minView) {\n              this.down();\n            } else {\n              var alreadySelected = this._isSelected(this.focused, this.cellType);\n\n              if (!alreadySelected) {\n                if (this.timepicker) {\n                  this.focused.setHours(this.timepicker.hours);\n                  this.focused.setMinutes(this.timepicker.minutes);\n                }\n\n                this.selectDate(this.focused);\n                return;\n              }\n\n              this._handleAlreadySelectedDates(alreadySelected, this.focused);\n            }\n          }\n        } // Esc\n\n\n        if (code == 27) {\n          this.hide();\n        }\n      },\n      _onKeyUp: function (e) {\n        var code = e.which;\n\n        this._unRegisterKey(code);\n      },\n      _onHotKey: function (e, hotKey) {\n        this._handleHotKey(hotKey);\n      },\n      _onMouseEnterCell: function (e) {\n        var $cell = $(e.target).closest('.datepicker--cell'),\n            date = this._getDateFromCell($cell); // Prevent from unnecessary rendering and setting new currentDate\n\n\n        this.silent = true;\n\n        if (this.focused) {\n          this.focused = '';\n        }\n\n        $cell.addClass('-focus-');\n        this.focused = date;\n        this.silent = false;\n\n        if (this.opts.range && this.selectedDates.length == 1) {\n          this.minRange = this.selectedDates[0];\n          this.maxRange = '';\n\n          if (datepicker.less(this.minRange, this.focused)) {\n            this.maxRange = this.minRange;\n            this.minRange = '';\n          }\n\n          this.views[this.currentView]._update();\n        }\n      },\n      _onMouseLeaveCell: function (e) {\n        var $cell = $(e.target).closest('.datepicker--cell');\n        $cell.removeClass('-focus-');\n        this.silent = true;\n        this.focused = '';\n        this.silent = false;\n      },\n      _onTimeChange: function (e, h, m) {\n        var date = new Date(),\n            selectedDates = this.selectedDates,\n            selected = false;\n\n        if (selectedDates.length) {\n          selected = true;\n          date = this.lastSelectedDate;\n        }\n\n        date.setHours(h);\n        date.setMinutes(m);\n\n        if (!selected && !this._getCell(date).hasClass('-disabled-')) {\n          this.selectDate(date);\n        } else {\n          this._setInputValue();\n\n          if (this.opts.onSelect) {\n            this._triggerOnChange();\n          }\n        }\n      },\n      _onClickCell: function (e, date) {\n        if (this.timepicker) {\n          date.setHours(this.timepicker.hours);\n          date.setMinutes(this.timepicker.minutes);\n        }\n\n        this.selectDate(date);\n      },\n\n      set focused(val) {\n        if (!val && this.focused) {\n          var $cell = this._getCell(this.focused);\n\n          if ($cell.length) {\n            $cell.removeClass('-focus-');\n          }\n        }\n\n        this._focused = val;\n\n        if (this.opts.range && this.selectedDates.length == 1) {\n          this.minRange = this.selectedDates[0];\n          this.maxRange = '';\n\n          if (datepicker.less(this.minRange, this._focused)) {\n            this.maxRange = this.minRange;\n            this.minRange = '';\n          }\n        }\n\n        if (this.silent) return;\n        this.date = val;\n      },\n\n      get focused() {\n        return this._focused;\n      },\n\n      get parsedDate() {\n        return datepicker.getParsedDate(this.date);\n      },\n\n      set date(val) {\n        if (!(val instanceof Date)) return;\n        this.currentDate = val;\n\n        if (this.inited && !this.silent) {\n          this.views[this.view]._render();\n\n          this.nav._render();\n\n          if (this.visible && this.elIsInput) {\n            this.setPosition();\n          }\n        }\n\n        return val;\n      },\n\n      get date() {\n        return this.currentDate;\n      },\n\n      set view(val) {\n        this.viewIndex = this.viewIndexes.indexOf(val);\n\n        if (this.viewIndex < 0) {\n          return;\n        }\n\n        this.prevView = this.currentView;\n        this.currentView = val;\n\n        if (this.inited) {\n          if (!this.views[val]) {\n            this.views[val] = new $.fn.datepicker.Body(this, val, this.opts);\n          } else {\n            this.views[val]._render();\n          }\n\n          this.views[this.prevView].hide();\n          this.views[val].show();\n\n          this.nav._render();\n\n          if (this.opts.onChangeView) {\n            this.opts.onChangeView(val);\n          }\n\n          if (this.elIsInput && this.visible) this.setPosition();\n        }\n\n        return val;\n      },\n\n      get view() {\n        return this.currentView;\n      },\n\n      get cellType() {\n        return this.view.substring(0, this.view.length - 1);\n      },\n\n      get minTime() {\n        var min = datepicker.getParsedDate(this.minDate);\n        return new Date(min.year, min.month, min.date).getTime();\n      },\n\n      get maxTime() {\n        var max = datepicker.getParsedDate(this.maxDate);\n        return new Date(max.year, max.month, max.date).getTime();\n      },\n\n      get curDecade() {\n        return datepicker.getDecade(this.date);\n      }\n\n    }; //  Utils\n    // -------------------------------------------------\n\n    datepicker.getDaysCount = function (date) {\n      return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n    };\n\n    datepicker.getParsedDate = function (date) {\n      return {\n        year: date.getFullYear(),\n        month: date.getMonth(),\n        fullMonth: date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1,\n        // One based\n        date: date.getDate(),\n        fullDate: date.getDate() < 10 ? '0' + date.getDate() : date.getDate(),\n        day: date.getDay(),\n        hours: date.getHours(),\n        fullHours: date.getHours() < 10 ? '0' + date.getHours() : date.getHours(),\n        minutes: date.getMinutes(),\n        fullMinutes: date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()\n      };\n    };\n\n    datepicker.getDecade = function (date) {\n      var firstYear = Math.floor(date.getFullYear() / 10) * 10;\n      return [firstYear, firstYear + 9];\n    };\n\n    datepicker.template = function (str, data) {\n      return str.replace(/#\\{([\\w]+)\\}/g, function (source, match) {\n        if (data[match] || data[match] === 0) {\n          return data[match];\n        }\n      });\n    };\n\n    datepicker.isSame = function (date1, date2, type) {\n      if (!date1 || !date2) return false;\n\n      var d1 = datepicker.getParsedDate(date1),\n          d2 = datepicker.getParsedDate(date2),\n          _type = type ? type : 'day',\n          conditions = {\n        day: d1.date == d2.date && d1.month == d2.month && d1.year == d2.year,\n        month: d1.month == d2.month && d1.year == d2.year,\n        year: d1.year == d2.year\n      };\n\n      return conditions[_type];\n    };\n\n    datepicker.less = function (dateCompareTo, date, type) {\n      if (!dateCompareTo || !date) return false;\n      return date.getTime() < dateCompareTo.getTime();\n    };\n\n    datepicker.bigger = function (dateCompareTo, date, type) {\n      if (!dateCompareTo || !date) return false;\n      return date.getTime() > dateCompareTo.getTime();\n    };\n\n    datepicker.getLeadingZeroNum = function (num) {\n      return parseInt(num) < 10 ? '0' + num : num;\n    };\n    /**\n     * Returns copy of date with hours and minutes equals to 0\n     * @param date {Date}\n     */\n\n\n    datepicker.resetTime = function (date) {\n      if (typeof date != 'object') return;\n      date = datepicker.getParsedDate(date);\n      return new Date(date.year, date.month, date.date);\n    };\n\n    $.fn.datepicker = function (options) {\n      return this.each(function () {\n        if (!$.data(this, pluginName)) {\n          $.data(this, pluginName, new Datepicker(this, options));\n        } else {\n          var _this = $.data(this, pluginName);\n\n          _this.opts = $.extend(true, _this.opts, options);\n\n          _this.update();\n        }\n      });\n    };\n\n    $.fn.datepicker.Constructor = Datepicker;\n    $.fn.datepicker.language = {\n      ru: {\n        days: ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'],\n        daysShort: ['Вос', 'Пон', 'Вто', 'Сре', 'Чет', 'Пят', 'Суб'],\n        daysMin: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],\n        months: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],\n        monthsShort: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],\n        today: 'Сегодня',\n        clear: 'Очистить',\n        dateFormat: 'dd.mm.yyyy',\n        timeFormat: 'hh:ii',\n        firstDay: 1\n      }\n    };\n    $(function () {\n      $(autoInitSelector).datepicker();\n    });\n  })();\n\n  ;\n\n  (function () {\n    var templates = {\n      days: '' + '<div class=\"datepicker--days datepicker--body\">' + '<div class=\"datepicker--days-names\"></div>' + '<div class=\"datepicker--cells datepicker--cells-days\"></div>' + '</div>',\n      months: '' + '<div class=\"datepicker--months datepicker--body\">' + '<div class=\"datepicker--cells datepicker--cells-months\"></div>' + '</div>',\n      years: '' + '<div class=\"datepicker--years datepicker--body\">' + '<div class=\"datepicker--cells datepicker--cells-years\"></div>' + '</div>'\n    },\n        datepicker = $.fn.datepicker,\n        dp = datepicker.Constructor;\n\n    datepicker.Body = function (d, type, opts) {\n      this.d = d;\n      this.type = type;\n      this.opts = opts;\n      this.$el = $('');\n      if (this.opts.onlyTimepicker) return;\n      this.init();\n    };\n\n    datepicker.Body.prototype = {\n      init: function () {\n        this._buildBaseHtml();\n\n        this._render();\n\n        this._bindEvents();\n      },\n      _bindEvents: function () {\n        this.$el.on('click', '.datepicker--cell', $.proxy(this._onClickCell, this));\n      },\n      _buildBaseHtml: function () {\n        this.$el = $(templates[this.type]).appendTo(this.d.$content);\n        this.$names = $('.datepicker--days-names', this.$el);\n        this.$cells = $('.datepicker--cells', this.$el);\n      },\n      _getDayNamesHtml: function (firstDay, curDay, html, i) {\n        curDay = curDay != undefined ? curDay : firstDay;\n        html = html ? html : '';\n        i = i != undefined ? i : 0;\n        if (i > 7) return html;\n        if (curDay == 7) return this._getDayNamesHtml(firstDay, 0, html, ++i);\n        html += '<div class=\"datepicker--day-name' + (this.d.isWeekend(curDay) ? \" -weekend-\" : \"\") + '\">' + this.d.loc.daysMin[curDay] + '</div>';\n        return this._getDayNamesHtml(firstDay, ++curDay, html, ++i);\n      },\n      _getCellContents: function (date, type) {\n        var classes = \"datepicker--cell datepicker--cell-\" + type,\n            currentDate = new Date(),\n            parent = this.d,\n            minRange = dp.resetTime(parent.minRange),\n            maxRange = dp.resetTime(parent.maxRange),\n            opts = parent.opts,\n            d = dp.getParsedDate(date),\n            render = {},\n            html = d.date;\n\n        switch (type) {\n          case 'day':\n            if (parent.isWeekend(d.day)) classes += \" -weekend-\";\n\n            if (d.month != this.d.parsedDate.month) {\n              classes += \" -other-month-\";\n\n              if (!opts.selectOtherMonths) {\n                classes += \" -disabled-\";\n              }\n\n              if (!opts.showOtherMonths) html = '';\n            }\n\n            break;\n\n          case 'month':\n            html = parent.loc[parent.opts.monthsField][d.month];\n            break;\n\n          case 'year':\n            var decade = parent.curDecade;\n            html = d.year;\n\n            if (d.year < decade[0] || d.year > decade[1]) {\n              classes += ' -other-decade-';\n\n              if (!opts.selectOtherYears) {\n                classes += \" -disabled-\";\n              }\n\n              if (!opts.showOtherYears) html = '';\n            }\n\n            break;\n        }\n\n        if (opts.onRenderCell) {\n          render = opts.onRenderCell(date, type) || {};\n          html = render.html ? render.html : html;\n          classes += render.classes ? ' ' + render.classes : '';\n        }\n\n        if (opts.range) {\n          if (dp.isSame(minRange, date, type)) classes += ' -range-from-';\n          if (dp.isSame(maxRange, date, type)) classes += ' -range-to-';\n\n          if (parent.selectedDates.length == 1 && parent.focused) {\n            if (dp.bigger(minRange, date) && dp.less(parent.focused, date) || dp.less(maxRange, date) && dp.bigger(parent.focused, date)) {\n              classes += ' -in-range-';\n            }\n\n            if (dp.less(maxRange, date) && dp.isSame(parent.focused, date)) {\n              classes += ' -range-from-';\n            }\n\n            if (dp.bigger(minRange, date) && dp.isSame(parent.focused, date)) {\n              classes += ' -range-to-';\n            }\n          } else if (parent.selectedDates.length == 2) {\n            if (dp.bigger(minRange, date) && dp.less(maxRange, date)) {\n              classes += ' -in-range-';\n            }\n          }\n        }\n\n        if (dp.isSame(currentDate, date, type)) classes += ' -current-';\n        if (parent.focused && dp.isSame(date, parent.focused, type)) classes += ' -focus-';\n        if (parent._isSelected(date, type)) classes += ' -selected-';\n        if (!parent._isInRange(date, type) || render.disabled) classes += ' -disabled-';\n        return {\n          html: html,\n          classes: classes\n        };\n      },\n\n      /**\n       * Calculates days number to render. Generates days html and returns it.\n       * @param {object} date - Date object\n       * @returns {string}\n       * @private\n       */\n      _getDaysHtml: function (date) {\n        var totalMonthDays = dp.getDaysCount(date),\n            firstMonthDay = new Date(date.getFullYear(), date.getMonth(), 1).getDay(),\n            lastMonthDay = new Date(date.getFullYear(), date.getMonth(), totalMonthDays).getDay(),\n            daysFromPevMonth = firstMonthDay - this.d.loc.firstDay,\n            daysFromNextMonth = 6 - lastMonthDay + this.d.loc.firstDay;\n        daysFromPevMonth = daysFromPevMonth < 0 ? daysFromPevMonth + 7 : daysFromPevMonth;\n        daysFromNextMonth = daysFromNextMonth > 6 ? daysFromNextMonth - 7 : daysFromNextMonth;\n        var startDayIndex = -daysFromPevMonth + 1,\n            m,\n            y,\n            html = '';\n\n        for (var i = startDayIndex, max = totalMonthDays + daysFromNextMonth; i <= max; i++) {\n          y = date.getFullYear();\n          m = date.getMonth();\n          html += this._getDayHtml(new Date(y, m, i));\n        }\n\n        return html;\n      },\n      _getDayHtml: function (date) {\n        var content = this._getCellContents(date, 'day');\n\n        return '<div class=\"' + content.classes + '\" ' + 'data-date=\"' + date.getDate() + '\" ' + 'data-month=\"' + date.getMonth() + '\" ' + 'data-year=\"' + date.getFullYear() + '\">' + content.html + '</div>';\n      },\n\n      /**\n       * Generates months html\n       * @param {object} date - date instance\n       * @returns {string}\n       * @private\n       */\n      _getMonthsHtml: function (date) {\n        var html = '',\n            d = dp.getParsedDate(date),\n            i = 0;\n\n        while (i < 12) {\n          html += this._getMonthHtml(new Date(d.year, i));\n          i++;\n        }\n\n        return html;\n      },\n      _getMonthHtml: function (date) {\n        var content = this._getCellContents(date, 'month');\n\n        return '<div class=\"' + content.classes + '\" data-month=\"' + date.getMonth() + '\">' + content.html + '</div>';\n      },\n      _getYearsHtml: function (date) {\n        var d = dp.getParsedDate(date),\n            decade = dp.getDecade(date),\n            firstYear = decade[0] - 1,\n            html = '',\n            i = firstYear;\n\n        for (i; i <= decade[1] + 1; i++) {\n          html += this._getYearHtml(new Date(i, 0));\n        }\n\n        return html;\n      },\n      _getYearHtml: function (date) {\n        var content = this._getCellContents(date, 'year');\n\n        return '<div class=\"' + content.classes + '\" data-year=\"' + date.getFullYear() + '\">' + content.html + '</div>';\n      },\n      _renderTypes: {\n        days: function () {\n          var dayNames = this._getDayNamesHtml(this.d.loc.firstDay),\n              days = this._getDaysHtml(this.d.currentDate);\n\n          this.$cells.html(days);\n          this.$names.html(dayNames);\n        },\n        months: function () {\n          var html = this._getMonthsHtml(this.d.currentDate);\n\n          this.$cells.html(html);\n        },\n        years: function () {\n          var html = this._getYearsHtml(this.d.currentDate);\n\n          this.$cells.html(html);\n        }\n      },\n      _render: function () {\n        if (this.opts.onlyTimepicker) return;\n\n        this._renderTypes[this.type].bind(this)();\n      },\n      _update: function () {\n        var $cells = $('.datepicker--cell', this.$cells),\n            _this = this,\n            classes,\n            $cell,\n            date;\n\n        $cells.each(function (cell, i) {\n          $cell = $(this);\n          date = _this.d._getDateFromCell($(this));\n          classes = _this._getCellContents(date, _this.d.cellType);\n          $cell.attr('class', classes.classes);\n        });\n      },\n      show: function () {\n        if (this.opts.onlyTimepicker) return;\n        this.$el.addClass('active');\n        this.acitve = true;\n      },\n      hide: function () {\n        this.$el.removeClass('active');\n        this.active = false;\n      },\n      //  Events\n      // -------------------------------------------------\n      _handleClick: function (el) {\n        var date = el.data('date') || 1,\n            month = el.data('month') || 0,\n            year = el.data('year') || this.d.parsedDate.year,\n            dp = this.d; // Change view if min view does not reach yet\n\n        if (dp.view != this.opts.minView) {\n          dp.down(new Date(year, month, date));\n          return;\n        } // Select date if min view is reached\n\n\n        var selectedDate = new Date(year, month, date),\n            alreadySelected = this.d._isSelected(selectedDate, this.d.cellType);\n\n        if (!alreadySelected) {\n          dp._trigger('clickCell', selectedDate);\n\n          return;\n        }\n\n        dp._handleAlreadySelectedDates.bind(dp, alreadySelected, selectedDate)();\n      },\n      _onClickCell: function (e) {\n        var $el = $(e.target).closest('.datepicker--cell');\n        if ($el.hasClass('-disabled-')) return;\n\n        this._handleClick.bind(this)($el);\n      }\n    };\n  })();\n\n  ;\n\n  (function () {\n    var template = '' + '<div class=\"datepicker--nav-action\" data-action=\"prev\">#{prevHtml}</div>' + '<div class=\"datepicker--nav-title\">#{title}</div>' + '<div class=\"datepicker--nav-action\" data-action=\"next\">#{nextHtml}</div>',\n        buttonsContainerTemplate = '<div class=\"datepicker--buttons\"></div>',\n        button = '<span class=\"datepicker--button\" data-action=\"#{action}\">#{label}</span>',\n        datepicker = $.fn.datepicker,\n        dp = datepicker.Constructor;\n\n    datepicker.Navigation = function (d, opts) {\n      this.d = d;\n      this.opts = opts;\n      this.$buttonsContainer = '';\n      this.init();\n    };\n\n    datepicker.Navigation.prototype = {\n      init: function () {\n        this._buildBaseHtml();\n\n        this._bindEvents();\n      },\n      _bindEvents: function () {\n        this.d.$nav.on('click', '.datepicker--nav-action', $.proxy(this._onClickNavButton, this));\n        this.d.$nav.on('click', '.datepicker--nav-title', $.proxy(this._onClickNavTitle, this));\n        this.d.$datepicker.on('click', '.datepicker--button', $.proxy(this._onClickNavButton, this));\n      },\n      _buildBaseHtml: function () {\n        if (!this.opts.onlyTimepicker) {\n          this._render();\n        }\n\n        this._addButtonsIfNeed();\n      },\n      _addButtonsIfNeed: function () {\n        if (this.opts.todayButton) {\n          this._addButton('today');\n        }\n\n        if (this.opts.clearButton) {\n          this._addButton('clear');\n        }\n      },\n      _render: function () {\n        var title = this._getTitle(this.d.currentDate),\n            html = dp.template(template, $.extend({\n          title: title\n        }, this.opts));\n\n        this.d.$nav.html(html);\n\n        if (this.d.view == 'years') {\n          $('.datepicker--nav-title', this.d.$nav).addClass('-disabled-');\n        }\n\n        this.setNavStatus();\n      },\n      _getTitle: function (date) {\n        return this.d.formatDate(this.opts.navTitles[this.d.view], date);\n      },\n      _addButton: function (type) {\n        if (!this.$buttonsContainer.length) {\n          this._addButtonsContainer();\n        }\n\n        var data = {\n          action: type,\n          label: this.d.loc[type]\n        },\n            html = dp.template(button, data);\n        if ($('[data-action=' + type + ']', this.$buttonsContainer).length) return;\n        this.$buttonsContainer.append(html);\n      },\n      _addButtonsContainer: function () {\n        this.d.$datepicker.append(buttonsContainerTemplate);\n        this.$buttonsContainer = $('.datepicker--buttons', this.d.$datepicker);\n      },\n      setNavStatus: function () {\n        if (!(this.opts.minDate || this.opts.maxDate) || !this.opts.disableNavWhenOutOfRange) return;\n        var date = this.d.parsedDate,\n            m = date.month,\n            y = date.year,\n            d = date.date;\n\n        switch (this.d.view) {\n          case 'days':\n            if (!this.d._isInRange(new Date(y, m - 1, 1), 'month')) {\n              this._disableNav('prev');\n            }\n\n            if (!this.d._isInRange(new Date(y, m + 1, 1), 'month')) {\n              this._disableNav('next');\n            }\n\n            break;\n\n          case 'months':\n            if (!this.d._isInRange(new Date(y - 1, m, d), 'year')) {\n              this._disableNav('prev');\n            }\n\n            if (!this.d._isInRange(new Date(y + 1, m, d), 'year')) {\n              this._disableNav('next');\n            }\n\n            break;\n\n          case 'years':\n            var decade = dp.getDecade(this.d.date);\n\n            if (!this.d._isInRange(new Date(decade[0] - 1, 0, 1), 'year')) {\n              this._disableNav('prev');\n            }\n\n            if (!this.d._isInRange(new Date(decade[1] + 1, 0, 1), 'year')) {\n              this._disableNav('next');\n            }\n\n            break;\n        }\n      },\n      _disableNav: function (nav) {\n        $('[data-action=\"' + nav + '\"]', this.d.$nav).addClass('-disabled-');\n      },\n      _activateNav: function (nav) {\n        $('[data-action=\"' + nav + '\"]', this.d.$nav).removeClass('-disabled-');\n      },\n      _onClickNavButton: function (e) {\n        var $el = $(e.target).closest('[data-action]'),\n            action = $el.data('action');\n        this.d[action]();\n      },\n      _onClickNavTitle: function (e) {\n        if ($(e.target).hasClass('-disabled-')) return;\n\n        if (this.d.view == 'days') {\n          return this.d.view = 'months';\n        }\n\n        this.d.view = 'years';\n      }\n    };\n  })();\n\n  ;\n\n  (function () {\n    var template = '<div class=\"datepicker--time\">' + '<div class=\"datepicker--time-current\">' + '   <span class=\"datepicker--time-current-hours\">#{hourVisible}</span>' + '   <span class=\"datepicker--time-current-colon\">:</span>' + '   <span class=\"datepicker--time-current-minutes\">#{minValue}</span>' + '</div>' + '<div class=\"datepicker--time-sliders\">' + '   <div class=\"datepicker--time-row\">' + '      <input type=\"range\" name=\"hours\" value=\"#{hourValue}\" min=\"#{hourMin}\" max=\"#{hourMax}\" step=\"#{hourStep}\"/>' + '   </div>' + '   <div class=\"datepicker--time-row\">' + '      <input type=\"range\" name=\"minutes\" value=\"#{minValue}\" min=\"#{minMin}\" max=\"#{minMax}\" step=\"#{minStep}\"/>' + '   </div>' + '</div>' + '</div>',\n        datepicker = $.fn.datepicker,\n        dp = datepicker.Constructor;\n\n    datepicker.Timepicker = function (inst, opts) {\n      this.d = inst;\n      this.opts = opts;\n      this.init();\n    };\n\n    datepicker.Timepicker.prototype = {\n      init: function () {\n        var input = 'input';\n\n        this._setTime(this.d.date);\n\n        this._buildHTML();\n\n        if (navigator.userAgent.match(/trident/gi)) {\n          input = 'change';\n        }\n\n        this.d.$el.on('selectDate', this._onSelectDate.bind(this));\n        this.$ranges.on(input, this._onChangeRange.bind(this));\n        this.$ranges.on('mouseup', this._onMouseUpRange.bind(this));\n        this.$ranges.on('mousemove focus ', this._onMouseEnterRange.bind(this));\n        this.$ranges.on('mouseout blur', this._onMouseOutRange.bind(this));\n      },\n      _setTime: function (date) {\n        var _date = dp.getParsedDate(date);\n\n        this._handleDate(date);\n\n        this.hours = _date.hours < this.minHours ? this.minHours : _date.hours;\n        this.minutes = _date.minutes < this.minMinutes ? this.minMinutes : _date.minutes;\n      },\n\n      /**\n       * Sets minHours and minMinutes from date (usually it's a minDate)\n       * Also changes minMinutes if current hours are bigger then @date hours\n       * @param date {Date}\n       * @private\n       */\n      _setMinTimeFromDate: function (date) {\n        this.minHours = date.getHours();\n        this.minMinutes = date.getMinutes(); // If, for example, min hours are 10, and current hours are 12,\n        // update minMinutes to default value, to be able to choose whole range of values\n\n        if (this.d.lastSelectedDate) {\n          if (this.d.lastSelectedDate.getHours() > date.getHours()) {\n            this.minMinutes = this.opts.minMinutes;\n          }\n        }\n      },\n      _setMaxTimeFromDate: function (date) {\n        this.maxHours = date.getHours();\n        this.maxMinutes = date.getMinutes();\n\n        if (this.d.lastSelectedDate) {\n          if (this.d.lastSelectedDate.getHours() < date.getHours()) {\n            this.maxMinutes = this.opts.maxMinutes;\n          }\n        }\n      },\n      _setDefaultMinMaxTime: function () {\n        var maxHours = 23,\n            maxMinutes = 59,\n            opts = this.opts;\n        this.minHours = opts.minHours < 0 || opts.minHours > maxHours ? 0 : opts.minHours;\n        this.minMinutes = opts.minMinutes < 0 || opts.minMinutes > maxMinutes ? 0 : opts.minMinutes;\n        this.maxHours = opts.maxHours < 0 || opts.maxHours > maxHours ? maxHours : opts.maxHours;\n        this.maxMinutes = opts.maxMinutes < 0 || opts.maxMinutes > maxMinutes ? maxMinutes : opts.maxMinutes;\n      },\n\n      /**\n       * Looks for min/max hours/minutes and if current values\n       * are out of range sets valid values.\n       * @private\n       */\n      _validateHoursMinutes: function (date) {\n        if (this.hours < this.minHours) {\n          this.hours = this.minHours;\n        } else if (this.hours > this.maxHours) {\n          this.hours = this.maxHours;\n        }\n\n        if (this.minutes < this.minMinutes) {\n          this.minutes = this.minMinutes;\n        } else if (this.minutes > this.maxMinutes) {\n          this.minutes = this.maxMinutes;\n        }\n      },\n      _buildHTML: function () {\n        var lz = dp.getLeadingZeroNum,\n            data = {\n          hourMin: this.minHours,\n          hourMax: lz(this.maxHours),\n          hourStep: this.opts.hoursStep,\n          hourValue: this.hours,\n          hourVisible: lz(this.displayHours),\n          minMin: this.minMinutes,\n          minMax: lz(this.maxMinutes),\n          minStep: this.opts.minutesStep,\n          minValue: lz(this.minutes)\n        },\n            _template = dp.template(template, data);\n\n        this.$timepicker = $(_template).appendTo(this.d.$datepicker);\n        this.$ranges = $('[type=\"range\"]', this.$timepicker);\n        this.$hours = $('[name=\"hours\"]', this.$timepicker);\n        this.$minutes = $('[name=\"minutes\"]', this.$timepicker);\n        this.$hoursText = $('.datepicker--time-current-hours', this.$timepicker);\n        this.$minutesText = $('.datepicker--time-current-minutes', this.$timepicker);\n\n        if (this.d.ampm) {\n          this.$ampm = $('<span class=\"datepicker--time-current-ampm\">').appendTo($('.datepicker--time-current', this.$timepicker)).html(this.dayPeriod);\n          this.$timepicker.addClass('-am-pm-');\n        }\n      },\n      _updateCurrentTime: function () {\n        var h = dp.getLeadingZeroNum(this.displayHours),\n            m = dp.getLeadingZeroNum(this.minutes);\n        this.$hoursText.html(h);\n        this.$minutesText.html(m);\n\n        if (this.d.ampm) {\n          this.$ampm.html(this.dayPeriod);\n        }\n      },\n      _updateRanges: function () {\n        this.$hours.attr({\n          min: this.minHours,\n          max: this.maxHours\n        }).val(this.hours);\n        this.$minutes.attr({\n          min: this.minMinutes,\n          max: this.maxMinutes\n        }).val(this.minutes);\n      },\n\n      /**\n       * Sets minHours, minMinutes etc. from date. If date is not passed, than sets\n       * values from options\n       * @param [date] {object} - Date object, to get values from\n       * @private\n       */\n      _handleDate: function (date) {\n        this._setDefaultMinMaxTime();\n\n        if (date) {\n          if (dp.isSame(date, this.d.opts.minDate)) {\n            this._setMinTimeFromDate(this.d.opts.minDate);\n          } else if (dp.isSame(date, this.d.opts.maxDate)) {\n            this._setMaxTimeFromDate(this.d.opts.maxDate);\n          }\n        }\n\n        this._validateHoursMinutes(date);\n      },\n      update: function () {\n        this._updateRanges();\n\n        this._updateCurrentTime();\n      },\n\n      /**\n       * Calculates valid hour value to display in text input and datepicker's body.\n       * @param date {Date|Number} - date or hours\n       * @param [ampm] {Boolean} - 12 hours mode\n       * @returns {{hours: *, dayPeriod: string}}\n       * @private\n       */\n      _getValidHoursFromDate: function (date, ampm) {\n        var d = date,\n            hours = date;\n\n        if (date instanceof Date) {\n          d = dp.getParsedDate(date);\n          hours = d.hours;\n        }\n\n        var _ampm = ampm || this.d.ampm,\n            dayPeriod = 'am';\n\n        if (_ampm) {\n          switch (true) {\n            case hours == 0:\n              hours = 12;\n              break;\n\n            case hours == 12:\n              dayPeriod = 'pm';\n              break;\n\n            case hours > 11:\n              hours = hours - 12;\n              dayPeriod = 'pm';\n              break;\n\n            default:\n              break;\n          }\n        }\n\n        return {\n          hours: hours,\n          dayPeriod: dayPeriod\n        };\n      },\n\n      set hours(val) {\n        this._hours = val;\n\n        var displayHours = this._getValidHoursFromDate(val);\n\n        this.displayHours = displayHours.hours;\n        this.dayPeriod = displayHours.dayPeriod;\n      },\n\n      get hours() {\n        return this._hours;\n      },\n\n      //  Events\n      // -------------------------------------------------\n      _onChangeRange: function (e) {\n        var $target = $(e.target),\n            name = $target.attr('name');\n        this.d.timepickerIsActive = true;\n        this[name] = $target.val();\n\n        this._updateCurrentTime();\n\n        this.d._trigger('timeChange', [this.hours, this.minutes]);\n\n        this._handleDate(this.d.lastSelectedDate);\n\n        this.update();\n      },\n      _onSelectDate: function (e, data) {\n        this._handleDate(data);\n\n        this.update();\n      },\n      _onMouseEnterRange: function (e) {\n        var name = $(e.target).attr('name');\n        $('.datepicker--time-current-' + name, this.$timepicker).addClass('-focus-');\n      },\n      _onMouseOutRange: function (e) {\n        var name = $(e.target).attr('name');\n        if (this.d.inFocus) return; // Prevent removing focus when mouse out of range slider\n\n        $('.datepicker--time-current-' + name, this.$timepicker).removeClass('-focus-');\n      },\n      _onMouseUpRange: function (e) {\n        this.d.timepickerIsActive = false;\n      }\n    };\n  })();\n})(window, jquery__WEBPACK_IMPORTED_MODULE_0___default.a);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/js/modules/datepicker.js\n");

/***/ }),

/***/ "./app/js/modules/form.js":
/*!********************************!*\
  !*** ./app/js/modules/form.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("window.addEventListener('DOMContentLoaded', () => {\n  //  select all reset all\n  const selectsAll = document.querySelectorAll('.select-all');\n  selectsAll.forEach(selectAll => {\n    selectAll.addEventListener('click', e => {\n      e.preventDefault();\n      const parentBlock = selectAll.closest('.filter__block');\n      const checkboxes = parentBlock.querySelectorAll('.input-checkbox input');\n      checkboxes.forEach(checkbox => {\n        checkbox.checked = true;\n      });\n    });\n  });\n  const resetsAll = document.querySelectorAll('.reset-all');\n  resetsAll.forEach(resetAll => {\n    resetAll.addEventListener('click', e => {\n      e.preventDefault();\n      const parentBlock = resetAll.closest('.filter__block');\n      const checkboxes = parentBlock.querySelectorAll('.input-checkbox input');\n      checkboxes.forEach(checkbox => {\n        checkbox.checked = false;\n      });\n    });\n  }); // end select all reset all\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kdWxlcy9mb3JtLmpzPzVlMWQiXSwibmFtZXMiOlsid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInNlbGVjdHNBbGwiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwic2VsZWN0QWxsIiwiZSIsInByZXZlbnREZWZhdWx0IiwicGFyZW50QmxvY2siLCJjbG9zZXN0IiwiY2hlY2tib3hlcyIsImNoZWNrYm94IiwiY2hlY2tlZCIsInJlc2V0c0FsbCIsInJlc2V0QWxsIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxnQkFBUCxDQUF3QixrQkFBeEIsRUFBNEMsTUFBTTtBQUVsRDtBQUNFLFFBQU1DLFVBQVUsR0FBR0MsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixhQUExQixDQUFuQjtBQUNBRixZQUFVLENBQUNHLE9BQVgsQ0FBbUJDLFNBQVMsSUFBSTtBQUM5QkEsYUFBUyxDQUFDTCxnQkFBVixDQUEyQixPQUEzQixFQUFvQ00sQ0FBQyxJQUFJO0FBQ3ZDQSxPQUFDLENBQUNDLGNBQUY7QUFDQSxZQUFNQyxXQUFXLEdBQUdILFNBQVMsQ0FBQ0ksT0FBVixDQUFrQixnQkFBbEIsQ0FBcEI7QUFDQSxZQUFNQyxVQUFVLEdBQUdGLFdBQVcsQ0FBQ0wsZ0JBQVosQ0FBNkIsdUJBQTdCLENBQW5CO0FBQ0FPLGdCQUFVLENBQUNOLE9BQVgsQ0FBbUJPLFFBQVEsSUFBSTtBQUM3QkEsZ0JBQVEsQ0FBQ0MsT0FBVCxHQUFtQixJQUFuQjtBQUNELE9BRkQ7QUFHRCxLQVBEO0FBUUQsR0FURDtBQVVBLFFBQU1DLFNBQVMsR0FBR1gsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixZQUExQixDQUFsQjtBQUNBVSxXQUFTLENBQUNULE9BQVYsQ0FBa0JVLFFBQVEsSUFBSTtBQUM1QkEsWUFBUSxDQUFDZCxnQkFBVCxDQUEwQixPQUExQixFQUFtQ00sQ0FBQyxJQUFJO0FBQ3RDQSxPQUFDLENBQUNDLGNBQUY7QUFDQSxZQUFNQyxXQUFXLEdBQUdNLFFBQVEsQ0FBQ0wsT0FBVCxDQUFpQixnQkFBakIsQ0FBcEI7QUFDQSxZQUFNQyxVQUFVLEdBQUdGLFdBQVcsQ0FBQ0wsZ0JBQVosQ0FBNkIsdUJBQTdCLENBQW5CO0FBQ0FPLGdCQUFVLENBQUNOLE9BQVgsQ0FBbUJPLFFBQVEsSUFBSTtBQUM3QkEsZ0JBQVEsQ0FBQ0MsT0FBVCxHQUFtQixLQUFuQjtBQUNELE9BRkQ7QUFHRCxLQVBEO0FBUUQsR0FURCxFQWZnRCxDQXlCbEQ7QUFHQyxDQTVCRCIsImZpbGUiOiIuL2FwcC9qcy9tb2R1bGVzL2Zvcm0uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcblxuLy8gIHNlbGVjdCBhbGwgcmVzZXQgYWxsXG4gIGNvbnN0IHNlbGVjdHNBbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2VsZWN0LWFsbCcpO1xuICBzZWxlY3RzQWxsLmZvckVhY2goc2VsZWN0QWxsID0+IHtcbiAgICBzZWxlY3RBbGwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnN0IHBhcmVudEJsb2NrID0gc2VsZWN0QWxsLmNsb3Nlc3QoJy5maWx0ZXJfX2Jsb2NrJyk7XG4gICAgICBjb25zdCBjaGVja2JveGVzID0gcGFyZW50QmxvY2sucXVlcnlTZWxlY3RvckFsbCgnLmlucHV0LWNoZWNrYm94IGlucHV0Jyk7XG4gICAgICBjaGVja2JveGVzLmZvckVhY2goY2hlY2tib3ggPT4ge1xuICAgICAgICBjaGVja2JveC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcbiAgY29uc3QgcmVzZXRzQWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnJlc2V0LWFsbCcpO1xuICByZXNldHNBbGwuZm9yRWFjaChyZXNldEFsbCA9PiB7XG4gICAgcmVzZXRBbGwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnN0IHBhcmVudEJsb2NrID0gcmVzZXRBbGwuY2xvc2VzdCgnLmZpbHRlcl9fYmxvY2snKTtcbiAgICAgIGNvbnN0IGNoZWNrYm94ZXMgPSBwYXJlbnRCbG9jay5xdWVyeVNlbGVjdG9yQWxsKCcuaW5wdXQtY2hlY2tib3ggaW5wdXQnKTtcbiAgICAgIGNoZWNrYm94ZXMuZm9yRWFjaChjaGVja2JveCA9PiB7XG4gICAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcbi8vIGVuZCBzZWxlY3QgYWxsIHJlc2V0IGFsbFxuXG5cbn0pIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/js/modules/form.js\n");

/***/ }),

/***/ "./app/js/modules/function.js":
/*!************************************!*\
  !*** ./app/js/modules/function.js ***!
  \************************************/
/*! exports provided: supportsTouch, canUseWebP, ibg, searchData, filterData, filterFlatData, bookingData, registerData, loginData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"supportsTouch\", function() { return supportsTouch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canUseWebP\", function() { return canUseWebP; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ibg\", function() { return ibg; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"searchData\", function() { return searchData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"filterData\", function() { return filterData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"filterFlatData\", function() { return filterFlatData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bookingData\", function() { return bookingData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"registerData\", function() { return registerData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loginData\", function() { return loginData; });\nlet supportsTouch = 'ontouchstart' in window || navigator.msMaxTouchPoints;\nfunction canUseWebP() {\n  let elem = document.createElement('canvas');\n\n  if (!!(elem.getContext && elem.getContext('2d'))) {\n    return elem.toDataURL('image/webp').indexOf('data:image/webp') === 0;\n  }\n\n  return false;\n} // img like a BG by Cassidy\n\nfunction ibg(isWebP) {\n  let ibgs = document.querySelectorAll('.ibg');\n  ibgs.forEach(item => {\n    if (item.querySelector('img')) {\n      item.style.backgroundImage = isWebP ? 'url(' + item.querySelector('source').getAttribute('srcset') + ')' : 'url(' + item.querySelector('img').getAttribute('src') + ')';\n    }\n  });\n} //end img like BG\n\nconst isWebPi = canUseWebP();\nibg(isWebPi); // запуск перевірки IBG. Функція визначить і при можливості замінить формат даного класу з JPEG в WEBP.\n//footer copyright====================================================\n\n(function generateCopyRight() {\n  let spanElement = document.createElement('span');\n  spanElement.innerHTML = `©${new Date().getFullYear()}р. <a href=\"/\">D-wave studio</a> `;\n\n  if (document.querySelector('.copyright')) {\n    document.querySelector('.copyright__main').append(spanElement);\n  }\n})(); // end footer copyright\n// Work with form data $$\n\n\nfunction searchData(data) {\n  console.log('Method searchData()');\n  console.log(data);\n}\nfunction filterData(data) {\n  console.log('Method filterData()');\n  console.log(data);\n}\nfunction filterFlatData(data) {\n  console.log('Method filterFlatData()');\n  console.log(data);\n}\nfunction bookingData(data) {\n  console.log('Method bookingData()');\n  console.log(data);\n}\nfunction registerData(data) {\n  console.log('Method registerData()');\n  console.log(data);\n}\nfunction loginData(data) {\n  console.log('Method loginData()');\n  console.log(data);\n} // Work with form data//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kdWxlcy9mdW5jdGlvbi5qcz84MWU3Il0sIm5hbWVzIjpbInN1cHBvcnRzVG91Y2giLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJtc01heFRvdWNoUG9pbnRzIiwiY2FuVXNlV2ViUCIsImVsZW0iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJnZXRDb250ZXh0IiwidG9EYXRhVVJMIiwiaW5kZXhPZiIsImliZyIsImlzV2ViUCIsImliZ3MiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsIml0ZW0iLCJxdWVyeVNlbGVjdG9yIiwic3R5bGUiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJnZXRBdHRyaWJ1dGUiLCJpc1dlYlBpIiwiZ2VuZXJhdGVDb3B5UmlnaHQiLCJzcGFuRWxlbWVudCIsImlubmVySFRNTCIsIkRhdGUiLCJnZXRGdWxsWWVhciIsImFwcGVuZCIsInNlYXJjaERhdGEiLCJkYXRhIiwiY29uc29sZSIsImxvZyIsImZpbHRlckRhdGEiLCJmaWx0ZXJGbGF0RGF0YSIsImJvb2tpbmdEYXRhIiwicmVnaXN0ZXJEYXRhIiwibG9naW5EYXRhIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFPLElBQUlBLGFBQWEsR0FBRyxrQkFBa0JDLE1BQWxCLElBQTRCQyxTQUFTLENBQUNDLGdCQUExRDtBQUVBLFNBQVNDLFVBQVQsR0FBc0I7QUFDM0IsTUFBSUMsSUFBSSxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBWDs7QUFDQSxNQUFJLENBQUMsRUFBRUYsSUFBSSxDQUFDRyxVQUFMLElBQW1CSCxJQUFJLENBQUNHLFVBQUwsQ0FBZ0IsSUFBaEIsQ0FBckIsQ0FBTCxFQUFrRDtBQUNoRCxXQUFPSCxJQUFJLENBQUNJLFNBQUwsQ0FBZSxZQUFmLEVBQTZCQyxPQUE3QixDQUFxQyxpQkFBckMsTUFBNEQsQ0FBbkU7QUFDRDs7QUFDRCxTQUFPLEtBQVA7QUFDRCxDLENBQ0Q7O0FBQ08sU0FBU0MsR0FBVCxDQUFhQyxNQUFiLEVBQXFCO0FBQzFCLE1BQUlDLElBQUksR0FBR1AsUUFBUSxDQUFDUSxnQkFBVCxDQUEwQixNQUExQixDQUFYO0FBQ0FELE1BQUksQ0FBQ0UsT0FBTCxDQUFjQyxJQUFELElBQVU7QUFDckIsUUFBR0EsSUFBSSxDQUFDQyxhQUFMLENBQW1CLEtBQW5CLENBQUgsRUFBNkI7QUFDM0JELFVBQUksQ0FBQ0UsS0FBTCxDQUFXQyxlQUFYLEdBQThCUCxNQUFELEdBQVUsU0FBT0ksSUFBSSxDQUFDQyxhQUFMLENBQW1CLFFBQW5CLEVBQTZCRyxZQUE3QixDQUEwQyxRQUExQyxDQUFQLEdBQTJELEdBQXJFLEdBQTJFLFNBQU9KLElBQUksQ0FBQ0MsYUFBTCxDQUFtQixLQUFuQixFQUEwQkcsWUFBMUIsQ0FBdUMsS0FBdkMsQ0FBUCxHQUFxRCxHQUE3SjtBQUNEO0FBQ0YsR0FKRDtBQUtELEMsQ0FDRDs7QUFDQSxNQUFNQyxPQUFPLEdBQUdqQixVQUFVLEVBQTFCO0FBQ0FPLEdBQUcsQ0FBQ1UsT0FBRCxDQUFILEMsQ0FBYztBQUdkOztBQUNBLENBQUMsU0FBU0MsaUJBQVQsR0FBNkI7QUFDNUIsTUFBSUMsV0FBVyxHQUFHakIsUUFBUSxDQUFDQyxhQUFULENBQXVCLE1BQXZCLENBQWxCO0FBQ0FnQixhQUFXLENBQUNDLFNBQVosR0FBeUIsSUFBRyxJQUFJQyxJQUFKLEdBQVdDLFdBQVgsRUFBeUIsbUNBQXJEOztBQUNBLE1BQUdwQixRQUFRLENBQUNXLGFBQVQsQ0FBdUIsWUFBdkIsQ0FBSCxFQUF5QztBQUN2Q1gsWUFBUSxDQUFDVyxhQUFULENBQXVCLGtCQUF2QixFQUEyQ1UsTUFBM0MsQ0FBa0RKLFdBQWxEO0FBQ0Q7QUFDRixDQU5ELEksQ0FPQTtBQUlBOzs7QUFFTyxTQUFTSyxVQUFULENBQW9CQyxJQUFwQixFQUEwQjtBQUMvQkMsU0FBTyxDQUFDQyxHQUFSLENBQVkscUJBQVo7QUFDQUQsU0FBTyxDQUFDQyxHQUFSLENBQVlGLElBQVo7QUFDRDtBQUVNLFNBQVNHLFVBQVQsQ0FBb0JILElBQXBCLEVBQTBCO0FBQy9CQyxTQUFPLENBQUNDLEdBQVIsQ0FBWSxxQkFBWjtBQUNBRCxTQUFPLENBQUNDLEdBQVIsQ0FBWUYsSUFBWjtBQUNEO0FBRU0sU0FBU0ksY0FBVCxDQUF3QkosSUFBeEIsRUFBOEI7QUFDbkNDLFNBQU8sQ0FBQ0MsR0FBUixDQUFZLHlCQUFaO0FBQ0FELFNBQU8sQ0FBQ0MsR0FBUixDQUFZRixJQUFaO0FBQ0Q7QUFFTSxTQUFTSyxXQUFULENBQXFCTCxJQUFyQixFQUEyQjtBQUNoQ0MsU0FBTyxDQUFDQyxHQUFSLENBQVksc0JBQVo7QUFDQUQsU0FBTyxDQUFDQyxHQUFSLENBQVlGLElBQVo7QUFDRDtBQUVNLFNBQVNNLFlBQVQsQ0FBc0JOLElBQXRCLEVBQTRCO0FBQ2pDQyxTQUFPLENBQUNDLEdBQVIsQ0FBWSx1QkFBWjtBQUNBRCxTQUFPLENBQUNDLEdBQVIsQ0FBWUYsSUFBWjtBQUNEO0FBRU0sU0FBU08sU0FBVCxDQUFtQlAsSUFBbkIsRUFBeUI7QUFDOUJDLFNBQU8sQ0FBQ0MsR0FBUixDQUFZLG9CQUFaO0FBQ0FELFNBQU8sQ0FBQ0MsR0FBUixDQUFZRixJQUFaO0FBQ0QsQyxDQUNEIiwiZmlsZSI6Ii4vYXBwL2pzL21vZHVsZXMvZnVuY3Rpb24uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgbGV0IHN1cHBvcnRzVG91Y2ggPSAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgfHwgbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHM7XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW5Vc2VXZWJQKCkge1xuICBsZXQgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICBpZiAoISEoZWxlbS5nZXRDb250ZXh0ICYmIGVsZW0uZ2V0Q29udGV4dCgnMmQnKSkpIHtcbiAgICByZXR1cm4gZWxlbS50b0RhdGFVUkwoJ2ltYWdlL3dlYnAnKS5pbmRleE9mKCdkYXRhOmltYWdlL3dlYnAnKSA9PT0gMDtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG4vLyBpbWcgbGlrZSBhIEJHIGJ5IENhc3NpZHlcbmV4cG9ydCBmdW5jdGlvbiBpYmcoaXNXZWJQKSB7XG4gIGxldCBpYmdzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmliZycpO1xuICBpYmdzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICBpZihpdGVtLnF1ZXJ5U2VsZWN0b3IoJ2ltZycpKXtcbiAgICAgIGl0ZW0uc3R5bGUuYmFja2dyb3VuZEltYWdlID0gKGlzV2ViUCk/ICd1cmwoJytpdGVtLnF1ZXJ5U2VsZWN0b3IoJ3NvdXJjZScpLmdldEF0dHJpYnV0ZSgnc3Jjc2V0JykrJyknIDogJ3VybCgnK2l0ZW0ucXVlcnlTZWxlY3RvcignaW1nJykuZ2V0QXR0cmlidXRlKCdzcmMnKSsnKSdcbiAgICB9XG4gIH0pXG59XG4vL2VuZCBpbWcgbGlrZSBCR1xuY29uc3QgaXNXZWJQaSA9IGNhblVzZVdlYlAoKTtcbmliZyhpc1dlYlBpKTsgLy8g0LfQsNC/0YPRgdC6INC/0LXRgNC10LLRltGA0LrQuCBJQkcuINCk0YPQvdC60YbRltGPINCy0LjQt9C90LDRh9C40YLRjCDRliDQv9GA0Lgg0LzQvtC20LvQuNCy0L7RgdGC0ZYg0LfQsNC80ZbQvdC40YLRjCDRhNC+0YDQvNCw0YIg0LTQsNC90L7Qs9C+INC60LvQsNGB0YMg0LcgSlBFRyDQsiBXRUJQLlxuXG5cbi8vZm9vdGVyIGNvcHlyaWdodD09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbihmdW5jdGlvbiBnZW5lcmF0ZUNvcHlSaWdodCgpIHtcbiAgbGV0IHNwYW5FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICBzcGFuRWxlbWVudC5pbm5lckhUTUwgPSBgwqkke25ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKX3RgC4gPGEgaHJlZj1cIi9cIj5ELXdhdmUgc3R1ZGlvPC9hPiBgO1xuICBpZihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29weXJpZ2h0JykpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29weXJpZ2h0X19tYWluJykuYXBwZW5kKHNwYW5FbGVtZW50KTtcbiAgfVxufSkoKTtcbi8vIGVuZCBmb290ZXIgY29weXJpZ2h0XG5cblxuXG4vLyBXb3JrIHdpdGggZm9ybSBkYXRhICQkXG5cbmV4cG9ydCBmdW5jdGlvbiBzZWFyY2hEYXRhKGRhdGEpIHtcbiAgY29uc29sZS5sb2coJ01ldGhvZCBzZWFyY2hEYXRhKCknKTtcbiAgY29uc29sZS5sb2coZGF0YSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJEYXRhKGRhdGEpIHtcbiAgY29uc29sZS5sb2coJ01ldGhvZCBmaWx0ZXJEYXRhKCknKTtcbiAgY29uc29sZS5sb2coZGF0YSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJGbGF0RGF0YShkYXRhKSB7XG4gIGNvbnNvbGUubG9nKCdNZXRob2QgZmlsdGVyRmxhdERhdGEoKScpO1xuICBjb25zb2xlLmxvZyhkYXRhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJvb2tpbmdEYXRhKGRhdGEpIHtcbiAgY29uc29sZS5sb2coJ01ldGhvZCBib29raW5nRGF0YSgpJyk7XG4gIGNvbnNvbGUubG9nKGRhdGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEYXRhKGRhdGEpIHtcbiAgY29uc29sZS5sb2coJ01ldGhvZCByZWdpc3RlckRhdGEoKScpO1xuICBjb25zb2xlLmxvZyhkYXRhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvZ2luRGF0YShkYXRhKSB7XG4gIGNvbnNvbGUubG9nKCdNZXRob2QgbG9naW5EYXRhKCknKTtcbiAgY29uc29sZS5sb2coZGF0YSk7XG59XG4vLyBXb3JrIHdpdGggZm9ybSBkYXRhXG5cblxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/js/modules/function.js\n");

/***/ }),

/***/ "./app/js/modules/gallery.js":
/*!***********************************!*\
  !*** ./app/js/modules/gallery.js ***!
  \***********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lightgallery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lightgallery */ \"./node_modules/lightgallery/dist/js/lightgallery.js\");\n/* harmony import */ var lightgallery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lightgallery__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lightgallery_modules_lg_zoom_min__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lightgallery/modules/lg-zoom.min */ \"./node_modules/lightgallery/modules/lg-zoom.min.js\");\n/* harmony import */ var lightgallery_modules_lg_zoom_min__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lightgallery_modules_lg_zoom_min__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lightgallery_modules_lg_video_min__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lightgallery/modules/lg-video.min */ \"./node_modules/lightgallery/modules/lg-video.min.js\");\n/* harmony import */ var lightgallery_modules_lg_video_min__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lightgallery_modules_lg_video_min__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\njquery__WEBPACK_IMPORTED_MODULE_0___default()(document).ready(function () {\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()(\"#lightgallery\").lightGallery({\n    selector: '.item-gallery',\n    zoom: true\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()(\".tab-slider\").lightGallery({\n    selector: '.item-gallery',\n    zoom: true,\n    autoplayFirstVideo: true,\n    youtubePlayerParams: {\n      modestbranding: 1,\n      showinfo: 0,\n      rel: 1,\n      controls: 1\n    }\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()(\".card-search\").lightGallery({\n    selector: '.item-gallery',\n    zoom: true\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()(\".flat-slider-gallery\").lightGallery({\n    selector: '.item-gallery',\n    zoom: true\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()(\".queues__card-first\").lightGallery({\n    selector: '.item-gallery',\n    zoom: true\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kdWxlcy9nYWxsZXJ5LmpzP2FjNjciXSwibmFtZXMiOlsiJCIsImRvY3VtZW50IiwicmVhZHkiLCJsaWdodEdhbGxlcnkiLCJzZWxlY3RvciIsInpvb20iLCJhdXRvcGxheUZpcnN0VmlkZW8iLCJ5b3V0dWJlUGxheWVyUGFyYW1zIiwibW9kZXN0YnJhbmRpbmciLCJzaG93aW5mbyIsInJlbCIsImNvbnRyb2xzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBQSw2Q0FBQyxDQUFDQyxRQUFELENBQUQsQ0FBWUMsS0FBWixDQUFrQixZQUFXO0FBQzNCRiwrQ0FBQyxDQUFDLGVBQUQsQ0FBRCxDQUFtQkcsWUFBbkIsQ0FBZ0M7QUFDOUJDLFlBQVEsRUFBRSxlQURvQjtBQUU5QkMsUUFBSSxFQUFFO0FBRndCLEdBQWhDO0FBSUFMLCtDQUFDLENBQUMsYUFBRCxDQUFELENBQWlCRyxZQUFqQixDQUE4QjtBQUM1QkMsWUFBUSxFQUFFLGVBRGtCO0FBRTVCQyxRQUFJLEVBQUUsSUFGc0I7QUFHNUJDLHNCQUFrQixFQUFFLElBSFE7QUFJNUJDLHVCQUFtQixFQUFFO0FBQ25CQyxvQkFBYyxFQUFFLENBREc7QUFFbkJDLGNBQVEsRUFBRSxDQUZTO0FBR25CQyxTQUFHLEVBQUUsQ0FIYztBQUluQkMsY0FBUSxFQUFFO0FBSlM7QUFKTyxHQUE5QjtBQWFBWCwrQ0FBQyxDQUFDLGNBQUQsQ0FBRCxDQUFrQkcsWUFBbEIsQ0FBK0I7QUFDN0JDLFlBQVEsRUFBRSxlQURtQjtBQUU3QkMsUUFBSSxFQUFFO0FBRnVCLEdBQS9CO0FBS0FMLCtDQUFDLENBQUMsc0JBQUQsQ0FBRCxDQUEwQkcsWUFBMUIsQ0FBdUM7QUFDckNDLFlBQVEsRUFBRSxlQUQyQjtBQUVyQ0MsUUFBSSxFQUFFO0FBRitCLEdBQXZDO0FBS0FMLCtDQUFDLENBQUMscUJBQUQsQ0FBRCxDQUF5QkcsWUFBekIsQ0FBc0M7QUFDcENDLFlBQVEsRUFBRSxlQUQwQjtBQUVwQ0MsUUFBSSxFQUFFO0FBRjhCLEdBQXRDO0FBT0QsQ0FuQ0QiLCJmaWxlIjoiLi9hcHAvanMvbW9kdWxlcy9nYWxsZXJ5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCAnbGlnaHRnYWxsZXJ5JztcbmltcG9ydCAnbGlnaHRnYWxsZXJ5L21vZHVsZXMvbGctem9vbS5taW4nXG5pbXBvcnQgJ2xpZ2h0Z2FsbGVyeS9tb2R1bGVzL2xnLXZpZGVvLm1pbidcblxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICQoXCIjbGlnaHRnYWxsZXJ5XCIpLmxpZ2h0R2FsbGVyeSh7XG4gICAgc2VsZWN0b3I6ICcuaXRlbS1nYWxsZXJ5JyxcbiAgICB6b29tOiB0cnVlXG4gIH0pO1xuICAkKFwiLnRhYi1zbGlkZXJcIikubGlnaHRHYWxsZXJ5KHtcbiAgICBzZWxlY3RvcjogJy5pdGVtLWdhbGxlcnknLFxuICAgIHpvb206IHRydWUsXG4gICAgYXV0b3BsYXlGaXJzdFZpZGVvOiB0cnVlLFxuICAgIHlvdXR1YmVQbGF5ZXJQYXJhbXM6IHtcbiAgICAgIG1vZGVzdGJyYW5kaW5nOiAxLFxuICAgICAgc2hvd2luZm86IDAsXG4gICAgICByZWw6IDEsXG4gICAgICBjb250cm9sczogMSxcblxuICAgIH0sXG4gIH0pO1xuXG4gICQoXCIuY2FyZC1zZWFyY2hcIikubGlnaHRHYWxsZXJ5KHtcbiAgICBzZWxlY3RvcjogJy5pdGVtLWdhbGxlcnknLFxuICAgIHpvb206IHRydWVcbiAgfSk7XG5cbiAgJChcIi5mbGF0LXNsaWRlci1nYWxsZXJ5XCIpLmxpZ2h0R2FsbGVyeSh7XG4gICAgc2VsZWN0b3I6ICcuaXRlbS1nYWxsZXJ5JyxcbiAgICB6b29tOiB0cnVlXG4gIH0pO1xuXG4gICQoXCIucXVldWVzX19jYXJkLWZpcnN0XCIpLmxpZ2h0R2FsbGVyeSh7XG4gICAgc2VsZWN0b3I6ICcuaXRlbS1nYWxsZXJ5JyxcbiAgICB6b29tOiB0cnVlXG4gIH0pO1xuXG5cblxufSk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/js/modules/gallery.js\n");

/***/ }),

/***/ "./app/js/modules/materialize.js":
/*!***************************************!*\
  !*** ./app/js/modules/materialize.js ***!
  \***************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var slick_carousel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! slick-carousel */ \"./node_modules/slick-carousel/slick/slick.js\");\n/* harmony import */ var slick_carousel__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(slick_carousel__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var materialize_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! materialize-css */ \"./node_modules/materialize-css/dist/js/materialize.js\");\n/* harmony import */ var materialize_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(materialize_css__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./function */ \"./app/js/modules/function.js\");\n\n\n\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  const allTabs = document.querySelectorAll('.tabs');\n  let TabsInstances = M.Tabs.init(allTabs, {});\n  const sliderTabs = document.querySelectorAll('.tab-slider-init');\n  sliderTabs.forEach(tab => {\n    tab.addEventListener('click', e => {\n      setTimeout(function () {\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('.tab-slider').slick('setPosition');\n      }, 100);\n    });\n  }); //  modals\n\n  const modals = document.querySelectorAll('.modal');\n  const modalsInstances = M.Modal.init(modals, {\n    startingTop: '1%',\n    endingTop: '3%',\n    onOpenEnd: function () {\n      const modalTabs = document.querySelectorAll('.modal .tabs');\n      let modalTabsInstances = M.Tabs.init(modalTabs, {});\n    }\n  }); //  modals\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kdWxlcy9tYXRlcmlhbGl6ZS5qcz80YTBjIl0sIm5hbWVzIjpbImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImFsbFRhYnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiVGFic0luc3RhbmNlcyIsIk0iLCJUYWJzIiwiaW5pdCIsInNsaWRlclRhYnMiLCJmb3JFYWNoIiwidGFiIiwiZSIsInNldFRpbWVvdXQiLCIkIiwic2xpY2siLCJtb2RhbHMiLCJtb2RhbHNJbnN0YW5jZXMiLCJNb2RhbCIsInN0YXJ0aW5nVG9wIiwiZW5kaW5nVG9wIiwib25PcGVuRW5kIiwibW9kYWxUYWJzIiwibW9kYWxUYWJzSW5zdGFuY2VzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFFQUEsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsWUFBVztBQUd2RCxRQUFNQyxPQUFPLEdBQUdGLFFBQVEsQ0FBQ0csZ0JBQVQsQ0FBMEIsT0FBMUIsQ0FBaEI7QUFDQSxNQUFJQyxhQUFhLEdBQUdDLENBQUMsQ0FBQ0MsSUFBRixDQUFPQyxJQUFQLENBQVlMLE9BQVosRUFBcUIsRUFBckIsQ0FBcEI7QUFHQSxRQUFNTSxVQUFVLEdBQUdSLFFBQVEsQ0FBQ0csZ0JBQVQsQ0FBMEIsa0JBQTFCLENBQW5CO0FBQ0FLLFlBQVUsQ0FBQ0MsT0FBWCxDQUFtQkMsR0FBRyxJQUFJO0FBQ3hCQSxPQUFHLENBQUNULGdCQUFKLENBQXFCLE9BQXJCLEVBQThCVSxDQUFDLElBQUk7QUFDakNDLGdCQUFVLENBQUMsWUFBWTtBQUNyQkMscURBQUMsQ0FBQyxhQUFELENBQUQsQ0FBaUJDLEtBQWpCLENBQXVCLGFBQXZCO0FBQ0QsT0FGUyxFQUVSLEdBRlEsQ0FBVjtBQUlELEtBTEQ7QUFNRCxHQVBELEVBUnVELENBaUJ2RDs7QUFDQSxRQUFNQyxNQUFNLEdBQUdmLFFBQVEsQ0FBQ0csZ0JBQVQsQ0FBMEIsUUFBMUIsQ0FBZjtBQUNBLFFBQU1hLGVBQWUsR0FBR1gsQ0FBQyxDQUFDWSxLQUFGLENBQVFWLElBQVIsQ0FBYVEsTUFBYixFQUFxQjtBQUMzQ0csZUFBVyxFQUFFLElBRDhCO0FBRTNDQyxhQUFTLEVBQUUsSUFGZ0M7QUFHM0NDLGFBQVMsRUFBRSxZQUFZO0FBQ3JCLFlBQU1DLFNBQVMsR0FBR3JCLFFBQVEsQ0FBQ0csZ0JBQVQsQ0FBMEIsY0FBMUIsQ0FBbEI7QUFDQSxVQUFJbUIsa0JBQWtCLEdBQUdqQixDQUFDLENBQUNDLElBQUYsQ0FBT0MsSUFBUCxDQUFZYyxTQUFaLEVBQXVCLEVBQXZCLENBQXpCO0FBRUQ7QUFQMEMsR0FBckIsQ0FBeEIsQ0FuQnVELENBNEJ6RDtBQUlDLENBaENEIiwiZmlsZSI6Ii4vYXBwL2pzL21vZHVsZXMvbWF0ZXJpYWxpemUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJCBmcm9tIFwianF1ZXJ5XCI7XG5pbXBvcnQgJ3NsaWNrLWNhcm91c2VsJztcbmltcG9ydCAnbWF0ZXJpYWxpemUtY3NzJztcblxuaW1wb3J0IHtzdXBwb3J0c1RvdWNofSBmcm9tIFwiLi9mdW5jdGlvblwiO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKSB7XG5cblxuICBjb25zdCBhbGxUYWJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRhYnMnKTtcbiAgbGV0IFRhYnNJbnN0YW5jZXMgPSBNLlRhYnMuaW5pdChhbGxUYWJzLCB7XG4gIH0pO1xuXG4gIGNvbnN0IHNsaWRlclRhYnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGFiLXNsaWRlci1pbml0Jyk7XG4gIHNsaWRlclRhYnMuZm9yRWFjaCh0YWIgPT4ge1xuICAgIHRhYi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoJy50YWItc2xpZGVyJykuc2xpY2soJ3NldFBvc2l0aW9uJyk7XG4gICAgICB9LDEwMClcblxuICAgIH0pXG4gIH0pXG5cbiAgLy8gIG1vZGFsc1xuICBjb25zdCBtb2RhbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubW9kYWwnKTtcbiAgY29uc3QgbW9kYWxzSW5zdGFuY2VzID0gTS5Nb2RhbC5pbml0KG1vZGFscywge1xuICAgIHN0YXJ0aW5nVG9wOiAnMSUnLFxuICAgIGVuZGluZ1RvcDogJzMlJyxcbiAgICBvbk9wZW5FbmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IG1vZGFsVGFicyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tb2RhbCAudGFicycpO1xuICAgICAgbGV0IG1vZGFsVGFic0luc3RhbmNlcyA9IE0uVGFicy5pbml0KG1vZGFsVGFicywge1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbi8vICBtb2RhbHNcblxuXG5cbn0pO1xuXG5cblxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/js/modules/materialize.js\n");

/***/ }),

/***/ "./app/js/modules/slick.js":
/*!*********************************!*\
  !*** ./app/js/modules/slick.js ***!
  \*********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var slick_carousel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! slick-carousel */ \"./node_modules/slick-carousel/slick/slick.js\");\n/* harmony import */ var slick_carousel__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(slick_carousel__WEBPACK_IMPORTED_MODULE_1__);\n\n\njquery__WEBPACK_IMPORTED_MODULE_0___default()(document).ready(function () {\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('.slider-section-single').slick({\n    slidesToShow: 1,\n    infinite: false,\n    slidesToScroll: 1,\n    arrows: true,\n    fade: false,\n    speed: 200,\n    easing: 'ease',\n    lazyLoad: 'ondemand',\n    draggable: true,\n    swipe: true,\n    touchThreshold: 5,\n    touchMove: true,\n    accessibility: true,\n    responsive: [{\n      breakpoint: 768,\n      settings: {\n        settings: \"unslick\",\n        arrows: false\n      }\n    }]\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('.slider-section-nav').on('init', function (event, slick) {\n    jquery__WEBPACK_IMPORTED_MODULE_0___default()('.slider-section-nav .slick-slide.slick-current .section__slider__item')[0].classList.add('active');\n  }).slick({\n    rows: 2,\n    arrows: false,\n    slidesToShow: 2,\n    slidesToScroll: 1,\n    dots: false,\n    focusOnSelect: true,\n    infinite: false,\n    easing: 'ease',\n    lazyLoad: 'ondemand',\n    speed: 200,\n    draggable: true,\n    swipe: true,\n    touchThreshold: 5,\n    touchMove: true,\n    responsive: [{\n      breakpoint: 850,\n      settings: {\n        settings: \"unslick\",\n        slidesToShow: 1\n      }\n    }, {\n      breakpoint: 768,\n      settings: {\n        settings: \"unslick\",\n        slidesToShow: 3,\n        rows: 1\n      }\n    }]\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('.slider-section-single').on('afterChange', function (event, slick, currentSlide) {\n    let currentNavSlide = jquery__WEBPACK_IMPORTED_MODULE_0___default()(`.slider-section-nav .section__slider__item[data-item=${currentSlide}]`);\n    let currentNavIndex = currentNavSlide.closest('.slick-slide').data('slick-index');\n    jquery__WEBPACK_IMPORTED_MODULE_0___default()('.slider-section-nav').slick('slickGoTo', currentNavIndex);\n    jquery__WEBPACK_IMPORTED_MODULE_0___default()('.slider-section-nav .section__slider__item').removeClass('active');\n    currentNavSlide.addClass('active');\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('.slider-section-nav').on('click', '.section__slider__item', function (event) {\n    event.preventDefault();\n    let goToSingleSlide = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).data('item');\n    jquery__WEBPACK_IMPORTED_MODULE_0___default()('.slider-section-single').slick('slickGoTo', goToSingleSlide);\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('.tab-slider').slick({\n    arrows: true,\n    dots: false,\n    rows: 1,\n    adaptiveHeight: false,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    speed: 500,\n    easing: 'ease',\n    infinite: false,\n    initialSlide: 0,\n    autoplay: false,\n    pauseOnFocus: true,\n    pauseOnHover: true,\n    draggable: true,\n    swipe: true,\n    touchThreshold: 5,\n    touchMove: true,\n    waitForAnimate: true,\n    centerMode: false,\n    variableWidth: false,\n    lazyLoad: 'ondemand',\n    mobileFirst: true,\n    accessibility: true,\n    responsive: [{\n      breakpoint: 576,\n      settings: {\n        settings: \"unslick\",\n        slidesToShow: 2\n      }\n    }, {\n      breakpoint: 768,\n      settings: {\n        settings: \"unslick\",\n        slidesToShow: 1\n      }\n    }, {\n      breakpoint: 992,\n      settings: {\n        settings: \"unslick\",\n        slidesToShow: 2\n      }\n    }]\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('.block-search-content__slider').slick({\n    arrows: true,\n    dots: false,\n    adaptiveHeight: false,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    speed: 500,\n    easing: 'ease',\n    infinite: false,\n    initialSlide: 0,\n    autoplay: false,\n    pauseOnFocus: true,\n    pauseOnHover: true,\n    draggable: true,\n    swipe: true,\n    touchThreshold: 5,\n    touchMove: true,\n    waitForAnimate: true,\n    centerMode: false,\n    variableWidth: false,\n    lazyLoad: 'ondemand',\n    mobileFirst: true,\n    accessibility: true,\n    responsive: [{\n      breakpoint: 600,\n      settings: {\n        settings: \"unslick\",\n        slidesToShow: 2\n      }\n    }]\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('.slider-flat').slick({\n    arrows: true,\n    dots: false,\n    adaptiveHeight: false,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    speed: 500,\n    easing: 'ease',\n    infinite: false,\n    initialSlide: 0,\n    autoplay: false,\n    pauseOnFocus: true,\n    pauseOnHover: true,\n    draggable: true,\n    swipe: true,\n    touchThreshold: 5,\n    touchMove: true,\n    waitForAnimate: true,\n    centerMode: false,\n    variableWidth: false,\n    lazyLoad: 'ondemand',\n    mobileFirst: true,\n    accessibility: true,\n    responsive: [{\n      breakpoint: 550,\n      settings: {\n        settings: \"unslick\",\n        slidesToShow: 2\n      }\n    }, {\n      breakpoint: 860,\n      settings: {\n        settings: \"unslick\",\n        slidesToShow: 3\n      }\n    }, {\n      breakpoint: 1100,\n      settings: {\n        settings: \"unslick\",\n        slidesToShow: 4\n      }\n    }]\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('.single-main-slider').slick({\n    slidesToShow: 1,\n    infinite: true,\n    slidesToScroll: 1,\n    arrows: false,\n    fade: true,\n    speed: 500,\n    easing: 'ease',\n    lazyLoad: 'ondemand',\n    draggable: true,\n    swipe: true,\n    touchThreshold: 5,\n    touchMove: true,\n    accessibility: true,\n    asNavFor: '.nav-main-slider'\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('.nav-main-slider').slick({\n    arrows: false,\n    slidesToShow: 3,\n    slidesToScroll: 1,\n    dots: false,\n    focusOnSelect: true,\n    easing: 'ease',\n    speed: 300,\n    draggable: true,\n    swipe: true,\n    touchThreshold: 5,\n    touchMove: true,\n    centerMode: true,\n    infinite: true,\n    asNavFor: '.single-main-slider'\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/js/modules/slick.js\n");

/***/ }),

/***/ "./app/js/modules/smoothScroll.js":
/*!****************************************!*\
  !*** ./app/js/modules/smoothScroll.js ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var smooth_scroll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! smooth-scroll */ \"./node_modules/smooth-scroll/dist/smooth-scroll.polyfills.min.js\");\n/* harmony import */ var smooth_scroll__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(smooth_scroll__WEBPACK_IMPORTED_MODULE_1__);\n\n //=========================================================================//init SmoothScroll========================================================\n\nlet scroll = new smooth_scroll__WEBPACK_IMPORTED_MODULE_1___default.a('a[href*=\"#\"]', {\n  //header: '[data-scroll-header]',\n  speed: 500,\n  topOnEmptyHash: true,\n  clip: true,\n  easing: 'easeInOutCubic',\n  updateURL: true,\n  popstate: true\n}); //=========================================================================\n//=========================================================================////# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kdWxlcy9zbW9vdGhTY3JvbGwuanM/ODY3YSJdLCJuYW1lcyI6WyJzY3JvbGwiLCJTbW9vdGhTY3JvbGwiLCJzcGVlZCIsInRvcE9uRW1wdHlIYXNoIiwiY2xpcCIsImVhc2luZyIsInVwZGF0ZVVSTCIsInBvcHN0YXRlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Q0FHQTs7QUFDQSxJQUFJQSxNQUFNLEdBQUcsSUFBSUMsb0RBQUosQ0FBaUIsY0FBakIsRUFBZ0M7QUFDM0M7QUFDQUMsT0FBSyxFQUFFLEdBRm9DO0FBRzNDQyxnQkFBYyxFQUFFLElBSDJCO0FBSTNDQyxNQUFJLEVBQUUsSUFKcUM7QUFLM0NDLFFBQU0sRUFBRSxnQkFMbUM7QUFPM0NDLFdBQVMsRUFBRSxJQVBnQztBQVEzQ0MsVUFBUSxFQUFFO0FBUmlDLENBQWhDLENBQWIsQyxDQVVBO0FBQ0EiLCJmaWxlIjoiLi9hcHAvanMvbW9kdWxlcy9zbW9vdGhTY3JvbGwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IFNtb290aFNjcm9sbCBmcm9tICdzbW9vdGgtc2Nyb2xsJztcblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ly9pbml0IFNtb290aFNjcm9sbD09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5sZXQgc2Nyb2xsID0gbmV3IFNtb290aFNjcm9sbCgnYVtocmVmKj1cIiNcIl0nLHtcbiAgLy9oZWFkZXI6ICdbZGF0YS1zY3JvbGwtaGVhZGVyXScsXG4gIHNwZWVkOiA1MDAsXG4gIHRvcE9uRW1wdHlIYXNoOiB0cnVlLFxuICBjbGlwOiB0cnVlLFxuICBlYXNpbmc6ICdlYXNlSW5PdXRDdWJpYycsXG5cbiAgdXBkYXRlVVJMOiB0cnVlLFxuICBwb3BzdGF0ZTogdHJ1ZVxufSk7XG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PS8vIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/js/modules/smoothScroll.js\n");

/***/ }),

/***/ "./app/js/modules/table.js":
/*!*********************************!*\
  !*** ./app/js/modules/table.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("window.addEventListener('DOMContentLoaded', () => {// filters\n  // end filters\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kdWxlcy90YWJsZS5qcz83OGI0Il0sIm5hbWVzIjpbIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiJBQUVBQSxNQUFNLENBQUNDLGdCQUFQLENBQXdCLGtCQUF4QixFQUE0QyxNQUFNLENBQ2hEO0FBRUE7QUFHRCxDQU5EIiwiZmlsZSI6Ii4vYXBwL2pzL21vZHVsZXMvdGFibGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gIC8vIGZpbHRlcnNcblxuICAvLyBlbmQgZmlsdGVyc1xuXG5cbn0pIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/js/modules/table.js\n");

/***/ }),

/***/ "./app/js/modules/validate.js":
/*!************************************!*\
  !*** ./app/js/modules/validate.js ***!
  \************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var materialize_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! materialize-css */ \"./node_modules/materialize-css/dist/js/materialize.js\");\n/* harmony import */ var materialize_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(materialize_css__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var jquery_mask_plugin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jquery-mask-plugin */ \"./node_modules/jquery-mask-plugin/dist/jquery.mask.js\");\n/* harmony import */ var jquery_mask_plugin__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jquery_mask_plugin__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var jquery_validation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jquery-validation */ \"./node_modules/jquery-validation/dist/jquery.validate.js\");\n/* harmony import */ var jquery_validation__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(jquery_validation__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./function */ \"./app/js/modules/function.js\");\n\n\n\n\n\n\n\n\n\n\njquery__WEBPACK_IMPORTED_MODULE_0___default()(document).ready(function () {\n  let options = {\n    onComplete: function (cep, e, field, options) {\n      let masks = [\"+38 (999) 999-9\", \"+38 (999) 999-9*-**\"];\n      let mask = '';\n\n      if (cep.length === 15) {\n        mask = masks[1];\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('.input-phone').val(cep + '*-**');\n      } else {\n        mask = masks[0];\n      }\n\n      jquery__WEBPACK_IMPORTED_MODULE_0___default()('.input-phone').mask(mask, options);\n    }\n  };\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()(\".input-phone\").mask(\"+38 (999) 999-9\", options);\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()(\".input-full-phone\").mask(\"+38 (999) 999-99-99\");\n  jquery__WEBPACK_IMPORTED_MODULE_0___default.a.validator.addMethod('customPhone', function (value, element) {\n    return this.optional(element) || /^(\\s*)?(\\+)?([- _():=+]?\\d[- _():=+]?){10,14}(\\s*)?$/.test(value);\n  }, \"Please enter a valid phone number\");\n  jquery__WEBPACK_IMPORTED_MODULE_0___default.a.validator.addMethod('uaPhone', function (value, element) {\n    return this.optional(element) || /^\\+38 (\\(0(39|50|63|66|67|68|91|92|93|94|95|96|97|98|99| 73)\\) [0-9]{3}\\-[0-9]{1}\\*\\-\\*\\*)$/g.test(value);\n  }, \"Please enter a valid phone number\");\n  let tagCheckRE = new RegExp(\"(\\\\w+)(\\\\s+)(\\\\w+)\");\n  jquery__WEBPACK_IMPORTED_MODULE_0___default.a.validator.addMethod(\"twoWords\", function (value, element) {\n    return tagCheckRE.test(value);\n  }, \"At least two words.\");\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('#search-form').validate({\n    rules: {\n      floorFrom: {\n        required: false,\n        maxlength: 2,\n        min: 1,\n        number: true\n      },\n      floorTo: {\n        required: false,\n        maxlength: 2,\n        min: 1,\n        number: true\n      },\n      squareFrom: {\n        required: false,\n        maxlength: 3,\n        min: 1,\n        number: true\n      },\n      squareTo: {\n        required: false,\n        maxlength: 3,\n        min: 1,\n        number: true\n      },\n      priceFrom: {\n        required: false,\n        maxlength: 6,\n        min: 1,\n        number: true\n      },\n      priceTo: {\n        required: false,\n        maxlength: 6,\n        min: 1,\n        number: true\n      }\n    },\n    messages: {\n      floorFrom: {\n        required: \"\",\n        maxlength: '',\n        min: '',\n        number: ''\n      },\n      floorTo: {\n        required: \"\",\n        maxlength: '',\n        min: '',\n        number: ''\n      },\n      squareFrom: {\n        required: \"\",\n        maxlength: '',\n        min: '',\n        number: ''\n      },\n      squareTo: {\n        required: \"\",\n        maxlength: '',\n        min: '',\n        number: ''\n      },\n      priceFrom: {\n        required: \"\",\n        maxlength: '',\n        min: '',\n        number: ''\n      },\n      priceTo: {\n        required: \"\",\n        maxlength: '',\n        min: '',\n        number: ''\n      }\n    },\n    submitHandler: function (form) {\n      let formData = jquery__WEBPACK_IMPORTED_MODULE_0___default()(form).serializeArray();\n      Object(_function__WEBPACK_IMPORTED_MODULE_4__[\"searchData\"])(formData);\n      const modal = document.querySelector('#search-block');\n      const modalInst = M.Modal.getInstance(modal);\n      modalInst.close();\n    }\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('#search-form-aside').validate({\n    rules: {\n      floorFrom: {\n        required: false,\n        maxlength: 2,\n        min: 1,\n        number: true\n      },\n      floorTo: {\n        required: false,\n        maxlength: 2,\n        min: 1,\n        number: true // customPhone: true\n\n      },\n      squareFrom: {\n        required: false,\n        maxlength: 3,\n        min: 1,\n        number: true\n      },\n      squareTo: {\n        required: false,\n        maxlength: 3,\n        min: 1,\n        number: true\n      },\n      priceFrom: {\n        required: false,\n        maxlength: 6,\n        min: 1,\n        number: true\n      },\n      priceTo: {\n        required: false,\n        maxlength: 6,\n        min: 1,\n        number: true\n      }\n    },\n    messages: {\n      floorFrom: {\n        required: \"\",\n        maxlength: '',\n        min: '',\n        number: ''\n      },\n      floorTo: {\n        required: \"\",\n        maxlength: '',\n        min: '',\n        number: ''\n      },\n      squareFrom: {\n        required: \"\",\n        maxlength: '',\n        min: '',\n        number: ''\n      },\n      squareTo: {\n        required: \"\",\n        maxlength: '',\n        min: '',\n        number: ''\n      },\n      priceFrom: {\n        required: \"\",\n        maxlength: '',\n        min: '',\n        number: ''\n      },\n      priceTo: {\n        required: \"\",\n        maxlength: '',\n        min: '',\n        number: ''\n      }\n    },\n    submitHandler: function (form) {\n      let formData = jquery__WEBPACK_IMPORTED_MODULE_0___default()(form).serializeArray();\n      Object(_function__WEBPACK_IMPORTED_MODULE_4__[\"searchData\"])(formData);\n      const modal = document.querySelector('#search-block');\n      const modalInst = M.Modal.getInstance(modal);\n      modalInst.close();\n    }\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('#flats-form-aside').validate({\n    rules: {\n      floorFrom: {\n        required: false,\n        maxlength: 2\n      },\n      floorTo: {\n        required: false,\n        maxlength: 2 // customPhone: true\n\n      },\n      squareFrom: {\n        required: false,\n        maxlength: 3\n      },\n      squareTo: {\n        required: false,\n        maxlength: 3\n      },\n      priceFrom: {\n        required: false,\n        maxlength: 6\n      },\n      priceTo: {\n        required: false,\n        maxlength: 6\n      }\n    },\n    messages: {\n      floorFrom: {\n        required: \"\",\n        maxlength: ''\n      },\n      floorTo: {\n        required: \"\",\n        maxlength: ''\n      },\n      squareFrom: {\n        required: \"\",\n        maxlength: ''\n      },\n      squareTo: {\n        required: \"\",\n        maxlength: ''\n      },\n      priceFrom: {\n        required: \"\",\n        maxlength: ''\n      },\n      priceTo: {\n        required: \"\",\n        maxlength: ''\n      }\n    },\n    submitHandler: function (form) {\n      let formData = jquery__WEBPACK_IMPORTED_MODULE_0___default()(form).serializeArray();\n      Object(_function__WEBPACK_IMPORTED_MODULE_4__[\"filterFlatData\"])(formData);\n    }\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('#filter-form-aside').validate({\n    submitHandler: function (form) {\n      let formData = jquery__WEBPACK_IMPORTED_MODULE_0___default()(form).serializeArray();\n      Object(_function__WEBPACK_IMPORTED_MODULE_4__[\"filterData\"])(formData);\n    }\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('#booking-form').validate({\n    rules: {\n      detailsBooking: {\n        required: true\n      },\n      clientNameBooking: {\n        required: true\n      },\n      clientPhoneBooking: {\n        required: true,\n        uaPhone: true //minlength: 6\n\n      },\n      deadLineBooking: {\n        required: true\n      }\n    },\n    messages: {\n      detailsBooking: {\n        required: 'Це обов\\'язкове поле'\n      },\n      clientNameBooking: {\n        required: 'Це обов\\'язкове поле'\n      },\n      clientPhoneBooking: {\n        required: \"Це обов\\'язкове поле\",\n        minlength: \"Номер надто короткий\",\n        uaPhone: \"Введіть коректний номер телефону\"\n      },\n      deadLineBooking: {\n        required: \"Це обов\\'язкове поле\"\n      }\n    },\n    submitHandler: function (form) {\n      //let formData = $(form).serializeArray();\n      //bookingData(formData);\n      //form.reset();\n      //const modal = document.querySelector('.booking-room');\n      //const modalInst = M.Modal.getInstance(modal);\n      //modalInst.close();\n      //M.toast({html: 'Квартира заброньована!'});\n      form.submit();\n    }\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('#registration-form').validate({\n    rules: {\n      'SignupForm[email]': {\n        required: true,\n        email: true\n      },\n      'SignupForm[r_name]': {\n        required: true,\n        minlength: 3\n      },\n      'SignupForm[phone]': {\n        required: true,\n        customPhone: true\n      },\n      'SignupForm[password]': {\n        required: true,\n        minlength: 6\n      }\n    },\n    messages: {\n      'SignupForm[email]': {\n        required: 'Це обов\\'язкове поле',\n        email: 'Невірний email'\n      },\n      'SignupForm[r_name]': {\n        required: \"Це обов\\'язкове поле\",\n        minlength: \"Надто коротке значення\" // twoWords: 'Вкажіть ім\\'я та прізвище'\n\n      },\n      'SignupForm[phone]': {\n        required: \"Це обов\\'язкове поле\",\n        customPhone: 'Не вірний номер телефону'\n      },\n      'SignupForm[password]': {\n        required: \"Це обов\\'язкове поле\",\n        minlength: 'Пароль повинен містити мінімум 6 символів'\n      }\n    },\n    submitHandler: function (form) {\n      // let formData = $(form).serializeArray();\n      // registerData(formData);\n      // form.reset();\n      // const modal = document.querySelector('.login-block');\n      // const modalInst = M.Modal.getInstance(modal);\n      // modalInst.close();\n      // M.toast({html: 'Дякуємо за реєсрацію!'});\n      form.submit();\n    }\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('#login-form').validate({\n    rules: {\n      'LoginForm[email]': {\n        required: true,\n        email: true\n      },\n      'LoginForm[password]': {\n        required: true,\n        minlength: 6\n      }\n    },\n    messages: {\n      'LoginForm[email]': {\n        required: 'Це обов\\'язкове поле',\n        email: 'Невірний email'\n      },\n      'LoginForm[password]': {\n        required: \"Це обов\\'язкове поле\",\n        minlength: 'Пароль повинен містити мінімум 6 символів'\n      }\n    },\n    submitHandler: function (form) {\n      // let formData = $(form).serializeArray();\n      // loginData(formData);\n      // form.reset();\n      // const modal = document.querySelector('.login-block');\n      // const modalInst = M.Modal.getInstance(modal);\n      // modalInst.close();\n      form.submit();\n    }\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('#id12').validate({\n    rules: {\n      detailsBooking: {\n        required: true\n      },\n      clientNameBooking: {\n        required: true\n      },\n      clientPhoneBooking: {\n        required: true,\n        uaPhone: true\n      },\n      deadLineBooking: {\n        required: true\n      }\n    },\n    messages: {\n      detailsBooking: {\n        required: 'Це обов\\'язкове поле'\n      },\n      clientNameBooking: {\n        required: 'Це обов\\'язкове поле'\n      },\n      clientPhoneBooking: {\n        required: \"Це обов\\'язкове поле\",\n        minlength: \"Номер надто короткий\",\n        uaPhone: \"Введіть коректний номер телефону\"\n      },\n      deadLineBooking: {\n        required: \"Це обов\\'язкове поле\"\n      }\n    },\n    submitHandler: function (form) {\n      form.submit();\n    }\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('#id13').validate({\n    rules: {\n      detailsBooking: {\n        required: true\n      },\n      clientNameBooking: {\n        required: true\n      },\n      clientPhoneBooking: {\n        required: true,\n        uaPhone: true\n      },\n      deadLineBooking: {\n        required: true\n      }\n    },\n    messages: {\n      detailsBooking: {\n        required: 'Це обов\\'язкове поле'\n      },\n      clientNameBooking: {\n        required: 'Це обов\\'язкове поле'\n      },\n      clientPhoneBooking: {\n        required: \"Це обов\\'язкове поле\",\n        minlength: \"Номер надто короткий\",\n        uaPhone: \"Введіть коректний номер телефону\"\n      },\n      deadLineBooking: {\n        required: \"Це обов\\'язкове поле\"\n      }\n    },\n    submitHandler: function (form) {\n      form.submit();\n    }\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('#id14').validate({\n    rules: {\n      detailsBooking: {\n        required: true\n      },\n      clientNameBooking: {\n        required: true\n      },\n      clientPhoneBooking: {\n        required: true,\n        uaPhone: true\n      },\n      deadLineBooking: {\n        required: true\n      }\n    },\n    messages: {\n      detailsBooking: {\n        required: 'Це обов\\'язкове поле'\n      },\n      clientNameBooking: {\n        required: 'Це обов\\'язкове поле'\n      },\n      clientPhoneBooking: {\n        required: \"Це обов\\'язкове поле\",\n        minlength: \"Номер надто короткий\",\n        uaPhone: \"Введіть коректний номер телефону\"\n      },\n      deadLineBooking: {\n        required: \"Це обов\\'язкове поле\"\n      }\n    },\n    submitHandler: function (form) {\n      form.submit();\n    }\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('#id15').validate({\n    rules: {\n      detailsBooking: {\n        required: true\n      },\n      clientNameBooking: {\n        required: true\n      },\n      clientPhoneBooking: {\n        required: true,\n        uaPhone: true\n      },\n      deadLineBooking: {\n        required: true\n      }\n    },\n    messages: {\n      detailsBooking: {\n        required: 'Це обов\\'язкове поле'\n      },\n      clientNameBooking: {\n        required: 'Це обов\\'язкове поле'\n      },\n      clientPhoneBooking: {\n        required: \"Це обов\\'язкове поле\",\n        minlength: \"Номер надто короткий\",\n        uaPhone: \"Введіть коректний номер телефону\"\n      },\n      deadLineBooking: {\n        required: \"Це обов\\'язкове поле\"\n      }\n    },\n    submitHandler: function (form) {\n      form.submit();\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/js/modules/validate.js\n");

/***/ })

/******/ });